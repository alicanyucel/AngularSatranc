import { Component, ContentChildren, EventEmitter, HostListener, Input, Output, ViewChild, ViewEncapsulation, forwardRef, signal } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FlexiOptionComponent } from './flexi-option.component';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class FlexiSelectComponent {
    constructor() {
        this.data = [];
        this.noData = "Kayıt bulunamadı";
        this.selectOne = "Seçim yapınız";
        this.themeClass = "light";
        this.itemsPerPage = 30;
        this.clientHeight = 180;
        this.multiple = false;
        this.closeAfterSelect = true;
        this.height = "100%";
        this.selected = new EventEmitter();
        this.onChange = (value) => { };
        this.onTouched = () => { };
        this.filteredData = signal([]);
        this.selectedItem = signal({});
        this.selectedItems = signal([]);
        this.isOpen = signal(false);
    }
    ngOnChanges(changes) {
        this.filteredData.set(this.data.slice(0, this.itemsPerPage));
        this.selectFirstOne();
        this.selectInitialStateValue();
    }
    ngAfterContentInit() {
        this.options.changes.subscribe(() => {
            if (this.options && this.options.length) {
                const optionData = this.options.map(option => ({
                    value: option.value,
                    label: option.viewValue
                }));
                this.data = optionData;
                this.filteredData.set(this.data.slice(0, this.itemsPerPage));
                this.selectFirstOne();
                this.label = "label";
                this.value = "value";
                this.selectInitialStateValue();
            }
        });
    }
    selectInitialStateValue() {
        if (this.data.length > 0 && this.initialState) {
            if (this.multiple) {
                this.clearAllSelected();
                this.selectedItems.set([]);
                const list = [];
                for (const val of this.initialState) {
                    const d = this.data.find(p => p[this.value] === val);
                    d.isSelected = true;
                    const item = {
                        [this.label]: d[this.label],
                        [this.value]: val
                    };
                    list.push(item);
                }
                this.selectedItems.set(list);
                this.initialState = undefined;
            }
            else {
                const val = this.data.find(p => p[this.value] === this.initialState);
                if (val) {
                    this.clearAllSelected();
                    this.selectedItem.set({ [this.label]: val[this.label], [this.value]: val[this.value] });
                    val.isSelected = true;
                    const findValue = this.filteredData().find(p => p[this.value] === val);
                    this.initialState = undefined;
                    if (findValue) {
                        findValue.isSelected = true;
                    }
                }
            }
        }
    }
    loadMoreData() {
        const val = this.flexiSelectInput.nativeElement.value.toString().toLocaleLowerCase("tr");
        let newData = val === "" ? this.data : this.data.filter(p => p[this.label].toString().toLocaleLowerCase("tr").includes(val));
        newData = newData.slice((this.filteredData().length - 1), (this.filteredData().length + this.itemsPerPage));
        this.filteredData.set([...this.filteredData(), ...newData]);
        this.clientHeight = this.clientHeight + 180;
    }
    onScroll(event) {
        const element = event.target;
        if (element.scrollHeight - element.scrollTop < 200) {
            this.loadMoreData();
        }
    }
    clearAllSelected() {
        this.filteredData().forEach(val => {
            val.isSelected = false;
        });
    }
    selectFirstOne() {
        if (this.filteredData().length === 0) {
            return;
        }
        this.clearAllSelected();
        this.filteredData()[0].isSelected = true;
    }
    openOrClose() {
        this.isOpen.set(!this.isOpen());
        if (this.isOpen()) {
            setTimeout(() => {
                this.flexiSelectInput?.nativeElement.focus();
            }, 100);
        }
    }
    handleClick(event) {
        const target = event.target;
        if (!target.closest('.flexi-select')) {
            this.isOpen.set(false);
        }
    }
    search() {
        const val = this.flexiSelectInput.nativeElement.value.toString().toLocaleLowerCase("tr");
        const filtered = this.data.filter(p => p[this.label].toString().toLocaleLowerCase("tr").includes(val)).slice(0, this.itemsPerPage);
        this.filteredData.set(filtered);
        if (!this.multiple) {
            this.selectFirstOne();
        }
    }
    setLiClass(item) {
        if (item.isSelected) {
            return "flexi-select-li flexi-active";
        }
        return "flexi-select-li";
    }
    onKeyDown(event) {
        const currentIndex = this.filteredData().findIndex(item => item.isSelected);
        if (event.key === 'Enter') {
            event.preventDefault();
            if (currentIndex !== -1) {
                this.select(this.filteredData()[currentIndex]);
            }
        }
        else if (event.key === 'ArrowDown') {
            event.preventDefault();
            if (currentIndex < this.filteredData().length - 1) {
                this.clearAllSelected();
                this.filteredData()[currentIndex + 1].isSelected = true;
                this.scrollToElement(currentIndex + 1);
            }
        }
        else if (event.key === 'ArrowUp') {
            event.preventDefault();
            if (currentIndex > 0) {
                this.clearAllSelected();
                this.filteredData()[currentIndex - 1].isSelected = true;
                this.scrollToElement(currentIndex - 1);
            }
        }
    }
    scrollToElement(index) {
        const ulElement = document.querySelector('.flexi-select-ul');
        const liElement = ulElement.children[index];
        liElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
    selectForMultiple(item) {
        const selectedItem = {
            [this.label]: item[this.label],
            [this.value]: item[this.value]
        };
        if (this.selectedItems().length === 0) {
            this.clearAllSelected();
        }
        const existingIndex = this.selectedItems().findIndex(existingItem => existingItem[this.value] === selectedItem[this.value]);
        if (existingIndex > -1) {
            item.isSelected = false;
            this.selectedItems.update(prev => {
                const updatedItems = [...prev];
                updatedItems.splice(existingIndex, 1);
                return updatedItems;
            });
        }
        else {
            item.isSelected = true;
            this.selectedItems.update(prev => [...prev, selectedItem]);
        }
        if (this.closeAfterSelect) {
            this.isOpen.set(false);
        }
        const selectedItemsForNgModel = this.selectedItems().map(val => val[this.value]);
        this.selected.emit(selectedItemsForNgModel);
        this.onChange(selectedItemsForNgModel);
        this.flexiSelectInput.nativeElement.select();
    }
    selectSingle(item) {
        this.clearAllSelected();
        item.isSelected = true;
        this.selectedItem.set(item);
        if (this.closeAfterSelect) {
            this.isOpen.set(false);
        }
        this.selected.emit(item[this.value]);
        this.onChange(item[this.value]);
        this.flexiSelectInput.nativeElement.select();
    }
    select(item) {
        if (this.multiple) {
            this.selectForMultiple(item);
        }
        else {
            this.selectSingle(item);
        }
    }
    selectOption(option) {
        const selectedItem = {
            [this.value]: option.value,
            [this.label]: option.viewValue
        };
        this.select(selectedItem);
    }
    writeValue(value) {
        if (value) {
            this.initialState = value;
            this.selectInitialStateValue();
        }
        else {
            this.selectedItem.set({});
            this.selectFirstOne();
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        // Implement if needed
    }
    removeSelectedItemFromSelectedItems(index, item) {
        this.selectedItems.update(prev => {
            const updatedItems = [...prev];
            updatedItems.splice(index, 1);
            return updatedItems;
        });
        const existingItem = this.data.find(p => p[this.value] === item[this.value]);
        if (existingItem) {
            existingItem.isSelected = false;
        }
        const selectedItemsForNgModel = this.selectedItems().map(val => val[this.value]);
        this.selected.emit(selectedItemsForNgModel);
        this.onChange(selectedItemsForNgModel);
        this.isOpen.set(true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.0.6", type: FlexiSelectComponent, isStandalone: true, selector: "flexi-select", inputs: { data: "data", value: "value", label: "label", noData: "noData", selectOne: "selectOne", themeClass: "themeClass", itemsPerPage: "itemsPerPage", clientHeight: "clientHeight", multiple: "multiple", closeAfterSelect: "closeAfterSelect", height: "height" }, outputs: { selected: "selected" }, host: { listeners: { "document:click": "handleClick($event)" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => FlexiSelectComponent),
                multi: true
            }
        ], queries: [{ propertyName: "options", predicate: i0.forwardRef(() => FlexiOptionComponent) }], viewQueries: [{ propertyName: "flexiSelectInput", first: true, predicate: ["flexiSelectInput"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"flexi-select\" [attr.data-bs-theme]=\"themeClass\">\r\n    <div class=\"flexi-select-div\" (click)=\"openOrClose()\" [ngStyle]=\"{'height': height}\">\r\n        @if(!multiple){\r\n            <span>\r\n                {{selectedItem()[label] === undefined ? selectOne : selectedItem()[label]}}\r\n            </span>\r\n        }@else {\r\n            <div class=\"flexi-select-multiple-container\">\r\n                @for(item of selectedItems();track item){\r\n                    <div class=\"flexi-select-multiple-value\">\r\n                        <span aria-hidden=\"true\" class=\"flexi-select-multiple-value-icon-left\" (click)=\"removeSelectedItemFromSelectedItems($index, item)\">\u00D7</span>\r\n                        <span class=\"flexi-select-multiple-value-label\">{{item[label]}}</span>\r\n                    </div>\r\n                }            \r\n            </div>\r\n        }\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\" class=\"flexi-select-div-svg\">\r\n            <path\r\n                d=\"M182.6 470.6c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-9.2-9.2-11.9-22.9-6.9-34.9s16.6-19.8 29.6-19.8H288c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9l-128 128z\" />\r\n        </svg>\r\n    </div>\r\n    <div class=\"flexi-select-dropdown\" [hidden]=\"!isOpen()\">\r\n        <input #flexiSelectInput class=\"flexi-select-search-input\" (input)=\"search()\" (keydown)=\"onKeyDown($event)\"\r\n            type=\"search\">\r\n        <ul class=\"flexi-select-ul\" (scroll)=\"onScroll($event)\">\r\n            @for(item of filteredData(); track $index){                \r\n                <li (click)=\"select(item)\" [class]=\"setLiClass(item)\">\r\n                    <span>{{item[label]}}</span>\r\n                </li>\r\n            }\r\n            @empty {\r\n            <li>\r\n                <span>{{noData}}</span>\r\n            </li>\r\n            }\r\n        </ul>\r\n    </div>\r\n</div>", styles: ["[data-bs-theme=light]{--flexi-select-background-color: #fff;--flexi-select-text-color: #000;--flexi-select-active-text-color: #212529;--flexi-select-active-background-color: #ebf5ff;--flexi-select-border-color: #dee2e6;--flexi-select-input-border-color: #dee2e6;--flexi-success: #47D764;--flexi-select: #ebf5ff;--flexi-select-multiple-value-text: #212529}[data-bs-theme=dark]{--flexi-select-background-color: #212529;--flexi-select-text-color: #fff;--flexi-select-active-text-color: #141414;--flexi-select-active-background-color: #f8f9fa;--flexi-select-border-color: #141414;--flexi-select-input-border-color: #f8f9fa;--flexi-success: #47D764;--flexi-select: #ebf5ff;--flexi-select-multiple-value-text: #212529}.flexi-select{position:relative;margin:0!important;padding:0!important}.flexi-select-div{min-height:36px}.flexi-select-div{position:relative;overflow-x:hidden}.flexi-select-div-svg{position:absolute;top:6px;right:10px;fill:var(--flexi-select-text-color);width:10px}.flexi-select-search-input:focus{outline:none}.flexi-select-search-input,.flexi-select-div{display:flex;align-items:center;width:100%;height:calc(1.47em + 1.3rem + 2px);padding:.5rem .875rem;font-size:.8125rem;font-weight:400;line-height:1.47;color:var(--flexi-select-text-color);background-color:var(--flexi-select-background-color);background-clip:padding-box;border:1px solid var(--flexi-select-border-color);border-radius:4px;-webkit-transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-box-shadow .15s ease-in-out}.flexi-active{font-weight:700}.flexi-active,.flexi-select-li:hover{background-color:var(--flexi-select-active-background-color);color:var(--flexi-select-active-text-color)}.flexi-select-search-input{border-color:var(--flexi-select-input-border-color)}.flexi-select-dropdown{position:absolute;z-index:999;background-color:var(--flexi-select-background-color);color:var(--flexi-select-text-color);width:100%;border:1px solid var(--flexi-select-border-color);border-radius:5px;padding-top:10px;padding-left:5px;padding-right:5px}.flexi-select-ul{height:100%;max-height:180px!important;overflow-y:auto;list-style:none;padding:5px 5px 0}.flexi-select-li{padding:5px;cursor:pointer}.no-click{pointer-events:none}.flexi-select-multiple-container{display:flex;flex-wrap:wrap;gap:5px}.flexi-select-multiple-value{background-color:var(--flexi-select);color:var(--flexi-select-multiple-value-text);padding:2px 3px;display:flex;gap:3px}.flexi-select-multiple-value-label{border-left:1px solid var(--flexi-select-border-color);padding-left:3px}.flexi-select-multiple-value-icon-left{cursor:pointer}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'flexi-select', standalone: true, imports: [CommonModule], encapsulation: ViewEncapsulation.None, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => FlexiSelectComponent),
                            multi: true
                        }
                    ], template: "<div class=\"flexi-select\" [attr.data-bs-theme]=\"themeClass\">\r\n    <div class=\"flexi-select-div\" (click)=\"openOrClose()\" [ngStyle]=\"{'height': height}\">\r\n        @if(!multiple){\r\n            <span>\r\n                {{selectedItem()[label] === undefined ? selectOne : selectedItem()[label]}}\r\n            </span>\r\n        }@else {\r\n            <div class=\"flexi-select-multiple-container\">\r\n                @for(item of selectedItems();track item){\r\n                    <div class=\"flexi-select-multiple-value\">\r\n                        <span aria-hidden=\"true\" class=\"flexi-select-multiple-value-icon-left\" (click)=\"removeSelectedItemFromSelectedItems($index, item)\">\u00D7</span>\r\n                        <span class=\"flexi-select-multiple-value-label\">{{item[label]}}</span>\r\n                    </div>\r\n                }            \r\n            </div>\r\n        }\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\" class=\"flexi-select-div-svg\">\r\n            <path\r\n                d=\"M182.6 470.6c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-9.2-9.2-11.9-22.9-6.9-34.9s16.6-19.8 29.6-19.8H288c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9l-128 128z\" />\r\n        </svg>\r\n    </div>\r\n    <div class=\"flexi-select-dropdown\" [hidden]=\"!isOpen()\">\r\n        <input #flexiSelectInput class=\"flexi-select-search-input\" (input)=\"search()\" (keydown)=\"onKeyDown($event)\"\r\n            type=\"search\">\r\n        <ul class=\"flexi-select-ul\" (scroll)=\"onScroll($event)\">\r\n            @for(item of filteredData(); track $index){                \r\n                <li (click)=\"select(item)\" [class]=\"setLiClass(item)\">\r\n                    <span>{{item[label]}}</span>\r\n                </li>\r\n            }\r\n            @empty {\r\n            <li>\r\n                <span>{{noData}}</span>\r\n            </li>\r\n            }\r\n        </ul>\r\n    </div>\r\n</div>", styles: ["[data-bs-theme=light]{--flexi-select-background-color: #fff;--flexi-select-text-color: #000;--flexi-select-active-text-color: #212529;--flexi-select-active-background-color: #ebf5ff;--flexi-select-border-color: #dee2e6;--flexi-select-input-border-color: #dee2e6;--flexi-success: #47D764;--flexi-select: #ebf5ff;--flexi-select-multiple-value-text: #212529}[data-bs-theme=dark]{--flexi-select-background-color: #212529;--flexi-select-text-color: #fff;--flexi-select-active-text-color: #141414;--flexi-select-active-background-color: #f8f9fa;--flexi-select-border-color: #141414;--flexi-select-input-border-color: #f8f9fa;--flexi-success: #47D764;--flexi-select: #ebf5ff;--flexi-select-multiple-value-text: #212529}.flexi-select{position:relative;margin:0!important;padding:0!important}.flexi-select-div{min-height:36px}.flexi-select-div{position:relative;overflow-x:hidden}.flexi-select-div-svg{position:absolute;top:6px;right:10px;fill:var(--flexi-select-text-color);width:10px}.flexi-select-search-input:focus{outline:none}.flexi-select-search-input,.flexi-select-div{display:flex;align-items:center;width:100%;height:calc(1.47em + 1.3rem + 2px);padding:.5rem .875rem;font-size:.8125rem;font-weight:400;line-height:1.47;color:var(--flexi-select-text-color);background-color:var(--flexi-select-background-color);background-clip:padding-box;border:1px solid var(--flexi-select-border-color);border-radius:4px;-webkit-transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-box-shadow .15s ease-in-out}.flexi-active{font-weight:700}.flexi-active,.flexi-select-li:hover{background-color:var(--flexi-select-active-background-color);color:var(--flexi-select-active-text-color)}.flexi-select-search-input{border-color:var(--flexi-select-input-border-color)}.flexi-select-dropdown{position:absolute;z-index:999;background-color:var(--flexi-select-background-color);color:var(--flexi-select-text-color);width:100%;border:1px solid var(--flexi-select-border-color);border-radius:5px;padding-top:10px;padding-left:5px;padding-right:5px}.flexi-select-ul{height:100%;max-height:180px!important;overflow-y:auto;list-style:none;padding:5px 5px 0}.flexi-select-li{padding:5px;cursor:pointer}.no-click{pointer-events:none}.flexi-select-multiple-container{display:flex;flex-wrap:wrap;gap:5px}.flexi-select-multiple-value{background-color:var(--flexi-select);color:var(--flexi-select-multiple-value-text);padding:2px 3px;display:flex;gap:3px}.flexi-select-multiple-value-label{border-left:1px solid var(--flexi-select-border-color);padding-left:3px}.flexi-select-multiple-value-icon-left{cursor:pointer}\n"] }]
        }], propDecorators: { data: [{
                type: Input
            }], value: [{
                type: Input
            }], label: [{
                type: Input
            }], noData: [{
                type: Input
            }], selectOne: [{
                type: Input
            }], themeClass: [{
                type: Input
            }], itemsPerPage: [{
                type: Input
            }], clientHeight: [{
                type: Input
            }], multiple: [{
                type: Input
            }], closeAfterSelect: [{
                type: Input
            }], height: [{
                type: Input
            }], selected: [{
                type: Output,
                args: ["selected"]
            }], options: [{
                type: ContentChildren,
                args: [forwardRef(() => FlexiOptionComponent)]
            }], flexiSelectInput: [{
                type: ViewChild,
                args: ["flexiSelectInput"]
            }], handleClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,