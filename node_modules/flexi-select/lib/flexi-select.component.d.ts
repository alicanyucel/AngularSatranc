import { ElementRef, EventEmitter, OnChanges, QueryList, SimpleChanges } from '@angular/core';
import { FlexiOptionComponent } from './flexi-option.component';
import * as i0 from "@angular/core";
export declare class FlexiSelectComponent implements OnChanges {
    data: any[];
    value: any;
    label: any;
    noData: string;
    selectOne: string;
    themeClass: string;
    itemsPerPage: number;
    clientHeight: number;
    multiple: boolean;
    closeAfterSelect: boolean;
    height: string;
    selected: EventEmitter<any>;
    options: QueryList<FlexiOptionComponent>;
    flexiSelectInput: ElementRef<HTMLInputElement> | undefined;
    private onChange;
    private onTouched;
    filteredData: import("@angular/core").WritableSignal<any[]>;
    selectedItem: import("@angular/core").WritableSignal<any>;
    selectedItems: import("@angular/core").WritableSignal<any[]>;
    isOpen: import("@angular/core").WritableSignal<boolean>;
    initialState: any;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    selectInitialStateValue(): void;
    loadMoreData(): void;
    onScroll(event: any): void;
    clearAllSelected(): void;
    selectFirstOne(): void;
    openOrClose(): void;
    handleClick(event: MouseEvent): void;
    search(): void;
    setLiClass(item: any): "flexi-select-li flexi-active" | "flexi-select-li";
    onKeyDown(event: KeyboardEvent): void;
    scrollToElement(index: number): void;
    selectForMultiple(item: any): void;
    selectSingle(item: any): void;
    select(item: any): void;
    selectOption(option: FlexiOptionComponent): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    removeSelectedItemFromSelectedItems(index: number, item: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FlexiSelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FlexiSelectComponent, "flexi-select", never, { "data": { "alias": "data"; "required": false; }; "value": { "alias": "value"; "required": false; }; "label": { "alias": "label"; "required": false; }; "noData": { "alias": "noData"; "required": false; }; "selectOne": { "alias": "selectOne"; "required": false; }; "themeClass": { "alias": "themeClass"; "required": false; }; "itemsPerPage": { "alias": "itemsPerPage"; "required": false; }; "clientHeight": { "alias": "clientHeight"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "closeAfterSelect": { "alias": "closeAfterSelect"; "required": false; }; "height": { "alias": "height"; "required": false; }; }, { "selected": "selected"; }, ["options"], never, true, never>;
}
