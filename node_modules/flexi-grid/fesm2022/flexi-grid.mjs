import * as i0 from '@angular/core';
import { Component, Input, signal, EventEmitter, ViewEncapsulation, Output, ContentChildren, ViewChild, HostListener, Injectable, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i3 from 'tr-currency';
import { TrCurrencyPipe } from 'tr-currency';

class FlexiGridColumnComponent {
    constructor() {
        this.field = '';
        this.title = '';
        this.sortable = true;
        this.filterable = true;
        this.visible = true;
        this.filterType = "text";
        this.format = null;
        this.fraction = 2;
        this.symbol = "";
        this.showSymbolInFront = true;
        this.width = "100%";
        this.resizable = true;
        this.draggable = true;
        this.className = "";
        this.textAlign = "left";
        this.hideOverflow = true;
        this.value = "";
        this.filterOperator = "contains";
    }
    ngOnChanges(changes) {
        if (changes['filterType']) {
            this.setDefaultFilterOperator();
        }
    }
    setDefaultFilterOperator() {
        if (this.filterType === 'number') {
            this.filterOperator = 'eq';
        }
        else {
            this.filterOperator = 'contains';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridColumnComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.6", type: FlexiGridColumnComponent, selector: "flexi-grid-column", inputs: { field: "field", title: "title", sortable: "sortable", filterable: "filterable", visible: "visible", filterType: "filterType", columnTemplate: "columnTemplate", format: "format", fraction: "fraction", symbol: "symbol", showSymbolInFront: "showSymbolInFront", width: "width", resizable: "resizable", draggable: "draggable", className: "className", textAlign: "textAlign", hideOverflow: "hideOverflow" }, host: { properties: { "attr.host-id": "\"flexi-grid-column-1\"" } }, usesOnChanges: true, ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridColumnComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'flexi-grid-column',
                    host: { '[attr.host-id]': '"flexi-grid-column-1"' },
                    template: ''
                }]
        }], propDecorators: { field: [{
                type: Input
            }], title: [{
                type: Input
            }], sortable: [{
                type: Input
            }], filterable: [{
                type: Input
            }], visible: [{
                type: Input
            }], filterType: [{
                type: Input
            }], columnTemplate: [{
                type: Input
            }], format: [{
                type: Input
            }], fraction: [{
                type: Input
            }], symbol: [{
                type: Input
            }], showSymbolInFront: [{
                type: Input
            }], width: [{
                type: Input
            }], resizable: [{
                type: Input
            }], draggable: [{
                type: Input
            }], className: [{
                type: Input
            }], textAlign: [{
                type: Input
            }], hideOverflow: [{
                type: Input
            }] } });

class StateModel {
    constructor() {
        this.pageNumber = 1;
        this.pageSize = 10;
        this.skip = 0;
        this.sort = new StateOrderModel();
        this.filter = [];
    }
}
class StateOrderModel {
    constructor() {
        this.dir = "";
        this.field = "";
    }
}
class StateFilterModel {
    constructor() {
        this.field = "";
        this.value = "";
        this.operator = "contains";
        this.type = "text";
    }
}

class FlexiGridComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.data = [];
        this.total = 0;
        this.pageable = false;
        this.pageSize = 10;
        this.showIndex = false;
        this.pageSizeList = [5, 10, 20, 30, 50, 100, 500, 1000];
        this.loading = false;
        this.sortable = false;
        this.themeClass = "light";
        this.height = "420px";
        this.filterable = false;
        this.captionTitle = "";
        this.showColumnVisibility = true;
        this.showRefreshData = true;
        this.dataBinding = false;
        this.showCaption = false;
        this.showExportExcel = false;
        this.autoHeight = false;
        this.minWidth = "1050px";
        this.useMinWidth = false;
        this.autoWidth = false;
        this.width = "100%";
        this.indexWidth = "70px";
        this.columnVisibilityBtnClass = "flexi-grid-btn";
        this.refreshDataBtnClass = "flexi-grid-btn";
        this.exportExcelBtnClass = "flexi-grid-btn";
        this.exportExcelFileName = "excel-export";
        this.footerPerPageText = "items per page";
        this.resizable = false;
        this.draggable = false;
        this.tbodyStyle = {};
        this.trMinHeight = "45px";
        this.pageNumberCount = signal(5);
        this.pageNumbers = signal([]);
        this.totalPageCount = signal(0);
        this.state = new StateModel();
        this.pagedData = signal([]);
        this.filterDropdownVisible = signal({});
        this.columnVisibilityDropdownVisible = signal(false);
        this.textFilterTypes = signal([
            { operator: "eq", value: 'Eşittir' },
            { operator: "ne", value: 'Eşit değildir' },
            { operator: "contains", value: 'İçerir' },
            { operator: "not contains", value: 'İçermez' },
            { operator: "startswith", value: 'İle başlar' },
            { operator: "endswith", value: 'İle biter' }
        ]);
        this.numberFilterTypes = signal([
            { operator: "eq", value: 'Eşittir' },
            { operator: "ne", value: 'Eşit değildir' },
            { operator: "gt", value: 'Daha büyüktür' },
            { operator: "ge", value: 'Daha büyüktür ya da eşittir' },
            { operator: "lt", value: 'Daha küçüktür' },
            { operator: "le", value: 'Daha küçüktür ya da eşittir' }
        ]);
        this.tempDraggable = false;
        this.dataStateChange = new EventEmitter();
        this.isShowMobileFilter = signal(false);
        this.onMouseMove = (event) => {
            if (this.resizingColumn) {
                const offset = event.pageX - this.startX;
                this.resizingColumn.width = this.startWidth + offset + 'px';
            }
        };
        this.onMouseUp = () => {
            this.resizingColumn = undefined;
            document.removeEventListener('mousemove', this.onMouseMove);
            document.removeEventListener('mouseup', this.onMouseUp);
            // Resize işlemi bittiğinde draggable durumunu geri yükle
            if (this.tempDraggable) {
                this.draggable = this.tempDraggable;
                this.tempDraggable = false;
            }
        };
    }
    ngOnChanges(changes) {
        // console.log("change is working...");
        if (this.data.length > 0) {
            if (!this.columns || this.columns.length === 0) {
                this.initializeColumnsFromData();
                this.cdr.detectChanges();
            }
        }
        if (this.pageSize !== this.state.pageSize) {
            this.state.pageSize = +this.pageSize;
        }
        if (this.pageable) {
            this.setPageNumbers();
            this.updatePagedData();
        }
        else {
            this.pagedData.set(this.data);
        }
    }
    ngAfterViewInit() {
        if (!this.columns || this.columns.length === 0) {
            this.initializeColumnsFromData();
            this.cdr.detectChanges();
        }
    }
    initializeColumnsFromData() {
        if (this.data && this.data.length > 0) {
            const firstItem = this.data[0];
            const columnsArray = Object.keys(firstItem).map(key => {
                const column = new FlexiGridColumnComponent();
                column.field = key;
                column.title = this.capitalizeFirstLetter(key);
                column.visible = true;
                column.hideOverflow = true;
                return column;
            });
            // Resetting columns with the newly created columns array
            if (this.columns) {
                this.columns.reset(columnsArray);
            }
        }
    }
    capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    changePage(pageNumber) {
        if (pageNumber > this.totalPageCount()) {
            pageNumber = this.totalPageCount();
        }
        else if (pageNumber < 1) {
            pageNumber = 1;
        }
        const previousPageNumber = this.state.pageNumber;
        this.state.pageNumber = +pageNumber;
        this.state.skip = (pageNumber - 1) * +this.state.pageSize;
        this.dataStateChange.emit(this.state);
        // Check if the page number crossed a 10-page boundary
        const previousGroup = Math.floor((previousPageNumber - 1) / this.pageNumberCount());
        const currentGroup = Math.floor((pageNumber - 1) / this.pageNumberCount());
        if (currentGroup > previousGroup) {
            this.nextPageGroup();
        }
        else if (currentGroup < previousGroup) {
            this.previousPageGroup();
        }
        else {
            this.setPageNumbers();
        }
        this.updatePagedData();
    }
    setPageNumbers() {
        const pageCount = Math.ceil(this.total / +this.state.pageSize);
        const numbers = [];
        // Calculate the current range of page numbers
        const currentGroup = Math.floor((this.state.pageNumber - 1) / this.pageNumberCount());
        const startPage = currentGroup * this.pageNumberCount() + 1;
        const endPage = Math.min(startPage + (this.pageNumberCount() - 1), pageCount);
        for (let i = startPage; i <= endPage; i++) {
            numbers.push(i);
        }
        this.pageNumbers.set(numbers);
        this.totalPageCount.set(pageCount);
    }
    nextPageGroup() {
        const pageCount = Math.ceil(this.total / +this.state.pageSize);
        const currentGroup = Math.floor((this.state.pageNumber - 1) / this.pageNumberCount());
        const nextGroupStartPage = (currentGroup) * this.pageNumberCount() + 1;
        if (nextGroupStartPage <= pageCount) {
            this.state.pageNumber = nextGroupStartPage;
        }
        this.setPageNumbers();
        this.updatePagedData();
    }
    previousPageGroup() {
        const currentGroup = Math.floor((this.state.pageNumber - 1) / this.pageNumberCount());
        const previousGroupStartPage = (currentGroup) * this.pageNumberCount() + 1;
        if (previousGroupStartPage > 0) {
            this.state.pageNumber = previousGroupStartPage;
        }
        this.setPageNumbers();
        this.updatePagedData();
    }
    changePageSize(event) {
        const value = +event.target.value;
        this.state.pageSize = value;
        this.state.pageNumber = 1;
        this.state.skip = 0;
        if (this.pageable && this.dataBinding) {
            this.dataStateChange.emit(this.state);
        }
        else {
            this.updatePagedData();
        }
    }
    updatePagedData() {
        let filteredData = this.data;
        if (!filteredData) {
            this.pagedData.set([]);
            return;
        }
        if (this.filterable && this.state.filter.length > 0 && !this.dataBinding) {
            const filters = this.state.filter.filter(p => p.value);
            filters.forEach(filter => {
                filteredData = filteredData.filter(item => {
                    const field = filter.field;
                    const value = filter.value;
                    const itemValue = item[field].toString().toLocaleLowerCase('tr');
                    const filterValue = value.toString().toLocaleLowerCase('tr');
                    switch (filter.operator) {
                        case 'eq':
                            return itemValue === filterValue;
                        case 'ne':
                            return itemValue !== filterValue;
                        case 'contains':
                            return itemValue.includes(filterValue);
                        case 'not contains':
                            return !itemValue.includes(filterValue);
                        case 'startswith':
                            return itemValue.startsWith(filterValue);
                        case 'endswith':
                            return itemValue.endsWith(filterValue);
                        case 'gt':
                            return parseFloat(itemValue) > parseFloat(filterValue);
                        case 'ge':
                            return parseFloat(itemValue) >= parseFloat(filterValue);
                        case 'lt':
                            return parseFloat(itemValue) < parseFloat(filterValue);
                        case 'le':
                            return parseFloat(itemValue) <= parseFloat(filterValue);
                        default:
                            return true;
                    }
                });
            });
        }
        // Order data if sortable is true
        if (this.sortable && this.state.sort.field && !this.dataBinding) {
            filteredData = filteredData.sort((a, b) => {
                const field = this.state.sort.field;
                const dir = this.state.sort.dir === 'asc' ? 1 : -1;
                if (a[field] < b[field])
                    return -1 * dir;
                if (a[field] > b[field])
                    return 1 * dir;
                return 0;
            });
        }
        if (!this.dataBinding) {
            this.total = filteredData.length;
            this.setPageNumbers();
        }
        // Pagination logic
        if (filteredData) {
            if (filteredData.length > +this.state.pageSize && !this.dataBinding && this.pageable) {
                const start = this.state.skip;
                const end = start + +this.state.pageSize;
                this.pagedData.set(filteredData.slice(start, end));
            }
            else {
                this.pagedData.set(filteredData);
            }
        }
    }
    sortData() {
        this.data = this.data.sort((a, b) => {
            const field = this.state.sort.field;
            const dir = this.state.sort.dir === 'asc' ? 1 : -1;
            if (a[field] < b[field])
                return -1 * dir;
            if (a[field] > b[field])
                return 1 * dir;
            return 0;
        });
        if (this.dataBinding) {
            this.dataStateChange.emit(this.state);
        }
        else {
            this.updatePagedData();
        }
    }
    sort(field) {
        this.state.sort.field = field;
        this.state.pageNumber = 1;
        if (this.state.sort.dir === "asc") {
            this.state.sort.dir = "desc";
        }
        else if (this.state.sort.dir === 'desc') {
            this.state.sort.dir = "";
            this.state.sort.field = '';
        }
        else {
            this.state.sort.dir = 'asc';
        }
        this.sortData();
    }
    toggleTheme() {
        this.themeClass = this.themeClass === 'light' ? 'dark' : 'light';
    }
    toggleFilterDropdown(field) {
        this.filterDropdownVisible()[field] = !this.filterDropdownVisible()[field];
    }
    applyFilter(column, operator) {
        this.filterDropdownVisible()[column.field] = false;
        column.filterOperator = operator;
        if (column.value !== "") {
            this.filter(column.field, operator, column.value, column.filterType);
        }
    }
    filter(field, operator, value, type) {
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
        }
        this.timeoutId = setTimeout(() => {
            if (value !== "") {
                this.state.pageNumber = 1;
                this.state.skip = 0;
                let filterField = this.state.filter.find(p => p.field === field);
                if (filterField) {
                    filterField.value = value;
                    filterField.operator = operator;
                }
                else {
                    filterField = new StateFilterModel();
                    filterField.field = field;
                    filterField.operator = operator;
                    filterField.value = value;
                    filterField.type = type;
                    this.state.filter.push(filterField);
                }
            }
            else {
                const findIndex = this.state.filter.findIndex(p => p.field === field);
                if (findIndex > -1) {
                    this.state.filter.splice(findIndex, 1);
                }
            }
            if (this.dataBinding) {
                this.dataStateChange.emit(this.state);
            }
            else {
                this.updatePagedData();
            }
        }, this.dataBinding ? 500 : 1);
    }
    showClearFilter(value) {
        if (value)
            return true;
        return false;
    }
    clearFilter(field) {
        this.filter(field, "contains", "", "text");
        const column = this.columns?.find(p => p.field === field);
        if (column) {
            column.value = "";
        }
        if (this.dataBinding) {
        }
        else {
            this.updatePagedData();
        }
    }
    toggleColumnVisibilityDropdown() {
        this.columnVisibilityDropdownVisible.set(!this.columnVisibilityDropdownVisible());
    }
    refreshDataMethod() {
        this.state = new StateModel();
        this.state.pageSize = this.pageSize;
        this.columns?.forEach(val => {
            val.value = "";
        });
        this.dataStateChange.emit(this.state);
    }
    closeAllDropdowns() {
        for (let i in this.filterDropdownVisible()) {
            this.filterDropdownVisible()[i] = false;
        }
    }
    handleClick(event) {
        const target = event.target;
        if (!target.closest('.dropdown-menu') && !target.closest('.svg')) {
            this.closeAllDropdowns();
        }
        if (!target.closest('.dropdown-menu') && !target.closest('button')) {
            this.columnVisibilityDropdownVisible.set(false);
        }
    }
    onExportExcelButtonClick() {
        if (this.exportExcelButtonClick) {
            this.exportExcelButtonClick();
        }
        else {
            this.exportExcel();
        }
    }
    exportExcel() {
        const visibleColumns = this.columns?.filter(column => column.visible).map(column => {
            return { field: column.field, title: column.title || column.field };
        }) || [];
        let csvData = visibleColumns.map(col => col.title).join(',') + '\n';
        let exportData = this.data;
        exportData.forEach(row => {
            let rowData = visibleColumns.map(col => {
                // Hücre içeriğindeki virgüller ve çift tırnakları kaçış karakteri ile değiştir
                const cellData = row[col.field] ? row[col.field].toString().replace(/"/g, '""') : '';
                return `"${cellData}"`;
            }).join(',');
            csvData += rowData + '\n';
        });
        const blob = new Blob([csvData], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.setAttribute('hidden', '');
        a.setAttribute('href', url);
        a.setAttribute('download', this.exportExcelFileName + '.csv');
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
    onMouseDown(event, column) {
        this.resizingColumn = column;
        this.startX = event.pageX;
        this.startWidth = event.target.parentElement.offsetWidth;
        // Eğer draggable ise, geçici olarak devre dışı bırak
        if (this.draggable) {
            this.tempDraggable = this.draggable;
            this.draggable = false;
        }
        document.addEventListener('mousemove', this.onMouseMove);
        document.addEventListener('mouseup', this.onMouseUp);
    }
    onDragStart(event, index) {
        this.draggedColumnIndex = index;
    }
    onDragOver(event, index) {
        event.preventDefault();
    }
    onDrop(event, index) {
        event.preventDefault();
        if (this.draggedColumnIndex === undefined)
            return;
        const draggedColumn = this.columns?.toArray()[this.draggedColumnIndex];
        const targetColumn = this.columns?.toArray()[index];
        if (draggedColumn && targetColumn) {
            const columnsArray = this.columns?.toArray();
            // Remove dragged column and insert it at the new position
            columnsArray.splice(this.draggedColumnIndex, 1);
            columnsArray.splice(index, 0, draggedColumn);
            this.columns?.reset(columnsArray);
        }
        this.draggedColumnIndex = undefined;
    }
    getFieldValue(item, field) {
        if (!field.includes(".")) {
            return item[field];
        }
        else {
            const fields = field.split(".");
            if (fields.length === 2) {
                return item[fields[0]][fields[1]];
            }
            else {
                console.log("Value not found!");
                return "";
            }
        }
    }
    openMobileFilter() {
        this.flexiGridFilterTr.nativeElement.classList.add("show");
        this.isShowMobileFilter.set(true);
    }
    closeMobileFilter() {
        this.flexiGridFilterTr.nativeElement.classList.remove("show");
        this.isShowMobileFilter.set(false);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.0.6", type: FlexiGridComponent, selector: "flexi-grid", inputs: { data: "data", total: "total", pageable: "pageable", pageSize: "pageSize", showIndex: "showIndex", pageSizeList: "pageSizeList", loading: "loading", sortable: "sortable", themeClass: "themeClass", height: "height", filterable: "filterable", captionTitle: "captionTitle", captionTemplate: "captionTemplate", footerTemplate: "footerTemplate", showColumnVisibility: "showColumnVisibility", showRefreshData: "showRefreshData", dataBinding: "dataBinding", showCaption: "showCaption", showExportExcel: "showExportExcel", autoHeight: "autoHeight", minWidth: "minWidth", useMinWidth: "useMinWidth", autoWidth: "autoWidth", width: "width", indexWidth: "indexWidth", columnVisibilityBtnClass: "columnVisibilityBtnClass", refreshDataBtnClass: "refreshDataBtnClass", exportExcelBtnClass: "exportExcelBtnClass", exportExcelFileName: "exportExcelFileName", exportExcelButtonClick: "exportExcelButtonClick", footerPerPageText: "footerPerPageText", resizable: "resizable", draggable: "draggable", tbodyStyle: "tbodyStyle", trMinHeight: "trMinHeight" }, outputs: { dataStateChange: "dataStateChange" }, host: { listeners: { "document:click": "handleClick($event)", "document:mousemove": "onMouseMove($event)", "document:mouseup": "onMouseUp()" } }, queries: [{ propertyName: "columns", predicate: FlexiGridColumnComponent }], viewQueries: [{ propertyName: "table", first: true, predicate: ["table"], descendants: true }, { propertyName: "flexiGridFilterTr", first: true, predicate: ["flexiGridFilterTr"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<title>Angular Flexi Grid</title>\r\n<div [attr.data-bs-theme]=\"themeClass\" class=\"flexi-grid-table-container overflow-x\" [ngStyle]=\"{'width': autoWidth ? '100%' : width}\">\r\n  @if(showCaption){\r\n    <div class=\"flexi-grid-caption-div\">\r\n      <h3>{{captionTitle}}</h3>\r\n      <div class=\"d-flex\" style=\"gap: 10px;\">      \r\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\r\n        @if(showExportExcel){\r\n          <button [ngClass]=\"exportExcelBtnClass\" (click)=\"onExportExcelButtonClick()\">\r\n            <svg style=\"width: 13px;\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d=\"M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM155.7 250.2L192 302.1l36.3-51.9c7.6-10.9 22.6-13.5 33.4-5.9s13.5 22.6 5.9 33.4L221.3 344l46.4 66.2c7.6 10.9 5 25.8-5.9 33.4s-25.8 5-33.4-5.9L192 385.8l-36.3 51.9c-7.6 10.9-22.6 13.5-33.4 5.9s-13.5-22.6-5.9-33.4L162.7 344l-46.4-66.2c-7.6-10.9-5-25.8 5.9-33.4s25.8-5 33.4 5.9z\"/></svg>\r\n          </button>\r\n        }\r\n        @if(showColumnVisibility){\r\n          <button [ngClass]=\"columnVisibilityBtnClass\" title=\"Column Visibility\" (click)=\"toggleColumnVisibilityDropdown()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"cursor\" style=\"width: 15px;\" viewBox=\"0 0 512 512\"><path d=\"M40 48C26.7 48 16 58.7 16 72v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V72c0-13.3-10.7-24-24-24H40zM192 64c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zM16 232v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V232c0-13.3-10.7-24-24-24H40c-13.3 0-24 10.7-24 24zM40 368c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V392c0-13.3-10.7-24-24-24H40z\"/></svg>\r\n            <div class=\"flexi-grid-dropdown-menu\" [class.show]=\"columnVisibilityDropdownVisible()\">\r\n              <p class=\"flexi-grid-dropdown-title\">Column Visibility</p>\r\n              @for(column of columns; track $index){\r\n                <label class=\"flexi-grid-dropdown-checkbox-item\" [for]=\"column.field\">\r\n                  <input [(ngModel)]=\"column.visible\" [id]=\"column.field\" type=\"checkbox\">\r\n                  {{ column.title ? column.title : column.field }}\r\n                </label>                    \r\n              }                    \r\n            </div>\r\n          </button>\r\n        }\r\n        @if(showRefreshData && dataBinding){\r\n          <button [ngClass]=\"refreshDataBtnClass\" (click)=\"refreshDataMethod()\">\r\n            <svg style=\"width: 13px;\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d=\"M463.5 224H472c13.3 0 24-10.7 24-24V72c0-9.7-5.8-18.5-14.8-22.2s-19.3-1.7-26.2 5.2L413.4 96.6c-87.6-86.5-228.7-86.2-315.8 1c-87.5 87.5-87.5 229.3 0 316.8s229.3 87.5 316.8 0c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0c-62.5 62.5-163.8 62.5-226.3 0s-62.5-163.8 0-226.3c62.2-62.2 162.7-62.5 225.3-1L327 183c-6.9 6.9-8.9 17.2-5.2 26.2s12.5 14.8 22.2 14.8H463.5z\"/></svg>\r\n          </button>\r\n        }\r\n        <div style=\"margin-right: 10px;\"></div>\r\n      </div>\r\n    </div>\r\n  }\r\n <table [ngStyle]=\"{'min-width': !useMinWidth ? '100%' : minWidth}\">\r\n   <thead>     \r\n     <tr>\r\n       @if(showIndex){\r\n         <th [ngStyle]=\"{'width': indexWidth}\">#</th>\r\n       }\r\n       @for(column of columns; track $index){          \r\n         @if(sortable && column.sortable && column.field && data.length > 0){\r\n           <th [ngStyle]=\"{'width': column.width}\" class=\"cursor flexi-grid-border\" [hidden]=\"!column.visible\"\r\n               [draggable]=\"(draggable && column.draggable)\"\r\n               (dragstart)=\"onDragStart($event, $index)\" \r\n               (dragover)=\"onDragOver($event, $index)\" \r\n               (drop)=\"onDrop($event, $index)\">\r\n             @if(resizable && column.resizable){\r\n               <div class=\"flexi-grid-resize-handle\" (mousedown)=\"onMouseDown($event, column)\"></div>\r\n             }\r\n             <div (click)=\"sort(column.field)\">\r\n               <span>{{ column.title ? column.title : column.field }}</span>\r\n               <span class=\"ms-2\">\r\n                 @if(this.state.sort.field === column.field){\r\n                   <span *ngIf=\"state.sort.field === column.field\">\r\n                     {{ state.sort.dir === 'asc' ? '\u2191' : '\u2193' }}\r\n                   </span>\r\n                 }\r\n               </span>\r\n             </div>              \r\n           </th>\r\n         }@else {\r\n           <th \r\n             [draggable]=\"(draggable && column.draggable)\" \r\n             [ngStyle]=\"{'width': column.width}\" \r\n             class=\"flexi-grid-border\" \r\n             [hidden]=\"!column.visible\"\r\n             (dragstart)=\"onDragStart($event, $index)\" \r\n             (dragover)=\"onDragOver($event, $index)\" \r\n             (drop)=\"onDrop($event, $index)\">\r\n             @if(resizable && column.resizable){\r\n               <div class=\"flexi-grid-resize-handle\" (mousedown)=\"onMouseDown($event, column)\"></div>\r\n             }\r\n             <div>\r\n               <span>{{ column.title ? column.title : column.field }}</span>\r\n             </div>\r\n           </th>\r\n         }\r\n       }\r\n     </tr> \r\n     @if(filterable){\r\n      <tr class=\"flexi-grid-mobile-filter-tr\">\r\n        <th colSpan=\"2\">\r\n          @if(isShowMobileFilter()){\r\n            <button class=\"flexi-grid-btn\" (click)=\"closeMobileFilter()\">              \r\n              <svg class=\"svg-mobile cursor\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M3.9 22.9C10.5 8.9 24.5 0 40 0H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L396.4 195.6C316.2 212.1 256 283 256 368c0 27.4 6.3 53.4 17.5 76.5c-1.6-.8-3.2-1.8-4.7-2.9l-64-48c-8.1-6-12.8-15.5-12.8-25.6V288.9L9 65.3C-.7 53.4-2.8 36.8 3.9 22.9zM432 224a144 144 0 1 1 0 288 144 144 0 1 1 0-288zm59.3 107.3c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L432 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L409.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L432 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L454.6 368l36.7-36.7z\"/></svg>\r\n              Filtreyi Kapat\r\n            </button>\r\n          }@else {\r\n            <button class=\"flexi-grid-btn\" (click)=\"openMobileFilter()\">\r\n              <svg class=\"svg-mobile cursor\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M3.9 54.9C10.5 40.9 24.5 32 40 32H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L320 320.9V448c0 12.1-6.8 23.2-17.7 28.6s-23.8 4.3-33.5-3l-64-48c-8.1-6-12.8-15.5-12.8-25.6V320.9L9 97.3C-.7 85.4-2.8 68.8 3.9 54.9z\"/></svg>\r\n              Filtreyi A\u00E7\r\n            </button>\r\n          }\r\n        </th>\r\n      </tr>\r\n      <tr class=\"flexi-grid-filter-tr\" #flexiGridFilterTr>\r\n        @if(showIndex && !isShowMobileFilter()){\r\n          <th class=\"flexi-grid-filter-th\" [ngStyle]=\"{'width': indexWidth}\"></th>\r\n        }\r\n        @for(column of columns; track $index){          \r\n          @if(column.filterable && column.field){            \r\n            <th class=\"flexi-grid-filter-th\" [hidden]=\"!column.visible\" [attr.data-label]=\"column.title ? column.title : column.field\">\r\n              <div class=\"d-flex flexi-grid-filter-container\">\r\n                @if(column.filterType === \"text\"){\r\n                  <input class=\"flexi-grid-filter-input\" type=\"text\" [(ngModel)]=\"column.value\" (input)=\"filter(column.field, column.filterOperator, column.value, column.filterType)\">\r\n                  @if(!column.value){\r\n                    <svg class=\"svg cursor show-filter\" (click)=\"toggleFilterDropdown(column.field)\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M3.9 54.9C10.5 40.9 24.5 32 40 32H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L320 320.9V448c0 12.1-6.8 23.2-17.7 28.6s-23.8 4.3-33.5-3l-64-48c-8.1-6-12.8-15.5-12.8-25.6V320.9L9 97.3C-.7 85.4-2.8 68.8 3.9 54.9z\"/></svg>\r\n                    <div class=\"flexi-grid-dropdown-menu\" [class.show]=\"filterDropdownVisible()[column.field]\">\r\n                      @for(filterType of textFilterTypes(); track filterType.operator){\r\n                        <a class=\"flexi-grid-dropdown-item\" [ngClass]=\"column.filterOperator === filterType.operator ? 'flexi-grid-active' : ''\" (click)=\"applyFilter(column, filterType.operator)\">\r\n                          {{ filterType.value }}\r\n                        </a>\r\n                      }                    \r\n                    </div>\r\n                  }\r\n                }@else if(column.filterType === \"date\"){\r\n                  <input class=\"flexi-grid-filter-input\" type=\"date\" [(ngModel)]=\"column.value\" (input)=\"filter(column.field, column.filterOperator, column.value, column.filterType)\">\r\n                }@else if(column.filterType === \"date-time\"){\r\n                  <input class=\"flexi-grid-filter-input\" type=\"datetime-local\" [(ngModel)]=\"column.value\" (input)=\"filter(column.field, column.filterOperator, column.value, column.filterType)\">\r\n                }@else if(column.filterType === \"number\"){\r\n                  <input class=\"flexi-grid-filter-input\" type=\"number\" [(ngModel)]=\"column.value\" (input)=\"filter(column.field, column.filterOperator, column.value, column.filterType)\">\r\n                  @if(!column.value){\r\n                    <svg class=\"svg cursor show-filter\" (click)=\"toggleFilterDropdown(column.field)\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M3.9 54.9C10.5 40.9 24.5 32 40 32H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L320 320.9V448c0 12.1-6.8 23.2-17.7 28.6s-23.8 4.3-33.5-3l-64-48c-8.1-6-12.8-15.5-12.8-25.6V320.9L9 97.3C-.7 85.4-2.8 68.8 3.9 54.9z\"/></svg>\r\n                    <div class=\"flexi-grid-dropdown-menu\" [class.show]=\"filterDropdownVisible()[column.field]\">\r\n                      @for(filterType of numberFilterTypes(); track filterType.operator){\r\n                        <a class=\"flexi-grid-dropdown-item\" [ngClass]=\"column.filterOperator === filterType.operator ? 'flexi-grid-active' : ''\" (click)=\"applyFilter(column, filterType.operator)\">\r\n                          {{ filterType.value }}\r\n                        </a>\r\n                      }                    \r\n                    </div>\r\n                  }\r\n                }\r\n                \r\n                @if(showClearFilter(column.value)){\r\n                  <svg (click)=\"clearFilter(column.field)\" class=\"svg cursor\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M3.9 22.9C10.5 8.9 24.5 0 40 0H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L396.4 195.6C316.2 212.1 256 283 256 368c0 27.4 6.3 53.4 17.5 76.5c-1.6-.8-3.2-1.8-4.7-2.9l-64-48c-8.1-6-12.8-15.5-12.8-25.6V288.9L9 65.3C-.7 53.4-2.8 36.8 3.9 22.9zM432 224a144 144 0 1 1 0 288 144 144 0 1 1 0-288zm59.3 107.3c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L432 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L409.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L432 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L454.6 368l36.7-36.7z\"/></svg>\r\n                }\r\n              </div>\r\n            </th>\r\n          }@else {\r\n            @if(!isShowMobileFilter()){\r\n              <th [hidden]=\"!column.visible\"></th>\r\n            }\r\n          }\r\n        }\r\n      </tr>\r\n    }    \r\n   </thead>\r\n   <tbody class=\"relative\" [ngStyle]=\"{'height': autoHeight ? '100%' : height}\" style=\"min-height: 100px;\" [ngStyle]=\"tbodyStyle\">\r\n     @if(loading){        \r\n       <div class=\"flexi-grid-spinner-container\">\r\n         <div class=\"flexi-grid-spinner-1\"></div>\r\n         <div class=\"flexi-grid-spinner-2\"></div>\r\n       </div>\r\n     }\r\n     @if(data.length > 0){      \r\n       @for(item of pagedData(); track $index; let i = $index){\r\n         <tr [ngStyle]=\"{'min-height': trMinHeight}\">\r\n           @if(showIndex){\r\n             @if(!pageable){\r\n               <td class=\"flexi-grid-index-td\" [ngStyle]=\"{'width': indexWidth}\" [attr.data-label]=\"'#'\">{{($index + 1)}}</td>\r\n             }\r\n             @else{\r\n               <td class=\"flexi-grid-index-td\" [ngStyle]=\"{'width': indexWidth}\" [attr.data-label]=\"'#'\">{{($index + ((state.pageNumber -1) * +state.pageSize)) + 1}}</td>\r\n             }\r\n           }\r\n           @for(column of columns; track $index){\r\n             @if(column.columnTemplate && column.visible){\r\n               <td [ngStyle]=\"{'width': column.width, 'text-align': column.textAlign}\" [ngClass]=\"column.className\" [attr.data-label]=\"column.title ? column.title : column.field\">\r\n                 <ng-container *ngTemplateOutlet=\"column.columnTemplate; context: {value: item[column.field], item: item, index: i}\"></ng-container>\r\n               </td>\r\n             }@else {\r\n               <td [ngStyle]=\"{'width': column.width, 'text-align': column.textAlign}\" [hidden]=\"!column.visible\" [ngClass]=\"column.className\" [ngClass]=\"column.hideOverflow ? 'text-overflow-hidden' : ''\" [attr.data-label]=\"column.title ? column.title : column.field\" [title]=\"item ? getFieldValue(item, column.field) : ''\">\r\n                 @if(column.field){\r\n                   @if((column.filterType === \"date\" || column.filterType === \"date-time\") && column.filterType){\r\n                     {{ getFieldValue(item, column.field) | date: column.format! }}\r\n                   }@else if(column.filterType === \"number\" && column.filterType){\r\n                     @if(column.format === \"n\" || column.format === null){\r\n                       {{ (getFieldValue(item, column.field) | trCurrency: \"\": true: column.fraction) }}\r\n                     }@else if(column.format === \"c\"){\r\n                       {{ (getFieldValue(item, column.field) | trCurrency : column.symbol: column.showSymbolInFront: column.fraction) }}\r\n                     }                    \r\n                   }\r\n                   @else {\r\n                     {{ getFieldValue(item, column.field) }}\r\n                   }\r\n                 }\r\n               </td>\r\n             }            \r\n           }\r\n         </tr>\r\n       }\r\n     }@else {\r\n       @if(!loading){\r\n         <tr style=\"height: 100%;\" [ngStyle]=\"{'min-height': trMinHeight}\">\r\n           <td style=\"text-align: center;\" [colSpan]=\"columns?.length\">\r\n             <h4>G\u00F6sterilecek veri bulunamad\u0131!</h4>\r\n           </td>\r\n         </tr>\r\n       }\r\n     }\r\n   </tbody>\r\n   <tfoot>\r\n     <ng-container *ngTemplateOutlet=\"footerTemplate\" class=\"overflow-x\"></ng-container>     \r\n   </tfoot>\r\n </table>\r\n  @if(pageable){\r\n    <div class=\"flexi-grid-pagination-container\">\r\n      @if(!isShowMobileFilter()){\r\n        <div class=\"flexi-grid-pagination-part-one\">\r\n          <select class=\"flexi-grid-pagesize-select\" [ngModel]=\"state.pageSize\" (change)=\"changePageSize($event)\">\r\n            @for(size of pageSizeList; track size){\r\n            <option>{{size}}</option>\r\n            }\r\n          </select>\r\n        </div>\r\n        <div class=\"flexi-grid-pagination-part-two\">\r\n          <ul class=\"flexi-grid-pagination\">\r\n            @if(this.pageNumbers().length > 1){              \r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === 1 ? 'disabled': ''\" (click)=\"changePage(1)\">\r\n                <a class=\"flexi-grid-page-link\" aria-label=\"Previous\">\r\n                  <span aria-hidden=\"true\">&laquo;</span>\r\n                </a>\r\n              </li>\r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === 1 ? 'disabled': ''\"\r\n                (click)=\"changePage(state.pageNumber - 1)\">\r\n                <a class=\"flexi-grid-page-link\" aria-label=\"Previous\">\r\n                  <span aria-hidden=\"true\">&#8249;</span>\r\n                </a>\r\n              </li>\r\n              @if(pageNumbers()[0] !== 1){\r\n              <li class=\"flexi-grid-page-item\" (click)=\"previousPageGroup()\">\r\n                <a class=\"flexi-grid-page-link\">...</a>\r\n              </li>\r\n              }\r\n              @for(pageNumber of pageNumbers(); track pageNumber){\r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === pageNumber ? 'flexi-grid-active': ''\">\r\n                <a (click)=\"changePage(pageNumber)\" class=\"flexi-grid-page-link\">\r\n                  {{pageNumber}}\r\n                </a>\r\n              </li>\r\n              }\r\n              @if(pageNumbers()[pageNumbers().length - 1] !== totalPageCount()){\r\n              <li class=\"flexi-grid-page-item\" (click)=\"nextPageGroup()\">\r\n                <a class=\"flexi-grid-page-link\">...</a>\r\n              </li>\r\n              }\r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === totalPageCount() ? 'disabled': ''\"\r\n                (click)=\"changePage(state.pageNumber + 1)\">\r\n                <a class=\"flexi-grid-page-link\" aria-label=\"Next\">\r\n                  <span aria-hidden=\"true\">&#8250;</span>\r\n                </a>\r\n              </li>\r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === totalPageCount() ? 'disabled': ''\"\r\n                (click)=\"changePage(totalPageCount())\">\r\n                <a class=\"flexi-grid-page-link\" aria-label=\"Next\">\r\n                  <span aria-hidden=\"true\">&raquo;</span>\r\n                </a>\r\n              </li>\r\n            }\r\n          </ul>        \r\n        </div>\r\n      }\r\n      <div class=\"flexi-grid-pagination-part-third\">\r\n        <span> \r\n            {{state.pageNumber}} - {{totalPageCount()}} of {{(total | currency: '': '': '1.0')!.replace(',','.')}} items \r\n        </span>\r\n      </div>\r\n    </div>\r\n  }\r\n</div>", styles: ["@import\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\";[data-bs-theme=light]{--background-color: #f8f9fa;--background-color-part: #fff;--bg-color-gray: #f8f9fa;--text-color: #000;--text-hover-color: #212529;--active-text-color: #212529;--active-background-color: #ebf5ff;--tbody-hover: #f1f1f1;--hover-background-color: #ebf5ff;--hover-text-color: #212529;--border-color: #dee2e6}[data-bs-theme=dark]{--background-color: #212529;--background-color-part: #141414;--bg-color-gray: #000;--text-color: #fff;--text-hover-color: #000;--tbody-hover: #353232;--active-text-color: #141414;--active-background-color: #f8f9fa;--hover-background-color: #f8f9fa;--hover-text-color: #212529;--border-color: #141414}input[type=number]::-webkit-outer-spin-button,input[type=number]::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}svg{fill:var(--text-color)}a{cursor:pointer;-webkit-user-select:none;user-select:none;text-decoration:none!important}.flexi-grid-page-size-select{margin-left:20px}.relative{position:relative}.cursor{cursor:pointer}.flexi-grid-spinner-container{position:absolute;z-index:1;width:100%;background-color:#55536d1a;height:100%;display:flex;justify-content:center;align-items:center}.flexi-grid-spinner-1{position:absolute;height:60px;width:60px;border:3px solid;top:auto;border-radius:50%;border-left-color:transparent;border-right-color:transparent;animation:flexi-grid-spin-1 .8s linear infinite;background-color:transparent}.flexi-grid-spinner-2{position:absolute;height:30px;width:30px;top:auto;border:3px solid;border-radius:50%;border-top-color:transparent;border-bottom-color:transparent;animation:flexi-grid-spin-2 1.3s linear infinite;background-color:transparent}@keyframes flexi-grid-spin-1{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes flexi-grid-spin-2{0%{transform:rotate(0)}to{transform:rotate(-360deg)}}.flexi-grid-pagination-container{background-color:var(--background-color);padding:20px;display:flex;justify-content:space-between;align-items:center;overflow-x:auto}@media screen and (max-width: 1350px){.flexi-grid-pagination-container,.flexi-grid-pagination-td{flex-direction:column;gap:10px}.flexi-grid-pagination-div{flex-direction:column}}.flexi-grid-pagination{display:flex;list-style:none;overflow-x:auto;margin:0;padding:0}.flexi-grid-pagination a{color:var(--text-color)}.svg{width:30px;margin-left:3px;padding:5px;border:1px solid #ccc}.svg:hover{background-color:#0000001a}.d-flex{display:flex;align-items:center}.flexi-grid-table-container{border:1px solid var(--border-color);border-radius:12px;overflow-x:auto;box-shadow:0 0 10px #0000001a;display:flex;flex-direction:column;background-color:var(--background-color-part);color:var(--text-color)}.flexi-grid-table-container table{caption-side:top;background-color:var(--background-color-part)}.flexi-grid-table-container caption{caption-side:top;padding:10px;background-color:var(--bg-color-gray);text-align:left;font-weight:700;border-bottom:1px solid var(--border-color)}.flexi-grid-table-container table{width:99.99%;border-collapse:collapse;overflow:auto;position:relative}.flexi-grid-table-container tbody::-webkit-scrollbar{display:none!important;width:12px}.flexi-grid-table-container tbody::-webkit-scrollbar-track{background:var(--background-color-part)}.flexi-grid-table-container tbody::-webkit-scrollbar-thumb{background-color:var(--text-color);border-radius:20px;border:3px solid var(--background-color-part)}.flexi-grid-table-container th,.flexi-grid-table-container td{padding-left:10px;padding-right:10px;text-align:left;border-bottom:1px solid var(--border-color)}.flexi-grid-border{position:relative;padding-right:10px}.flexi-grid-table-container td,.flexi-grid-filter-th,.flexi-grid-table-container th{border-right:1px solid var(--border-color);overflow-wrap:anywhere}.flexi-grid-border:last-child:after{display:none}.flexi-grid-table-container tfoot td{border-right:0px}.flexi-grid-table-container th{background-color:var(--background-color);padding-top:20px;padding-bottom:15px;position:sticky;top:0;z-index:1}.flexi-grid-table-container th{-webkit-user-select:none;user-select:none}.flexi-grid-table-container tbody tr:nth-child(odd){background-color:var(--background-color)}.flexi-grid-table-container tbody tr:hover{background-color:var(--tbody-hover)}.flexi-grid-table-container tbody{flex:1;overflow:auto;display:block}.flexi-grid-table-container tbody tr{display:table;width:100%;table-layout:fixed}.flexi-grid-table-container thead,.flexi-grid-table-container tfoot{display:table;width:calc(100% - 12px);width:100%;table-layout:fixed;z-index:1}.flexi-grid-filter-input{width:80%;padding:5px;border:1px solid #ced4da;border-radius:3px;background-color:var(--background-color-part);color:var(--text-color)}.flexi-grid-select-container{display:flex;align-items:center;margin-top:10px}.flexi-grid-select-container select{margin-right:10px}div .flexi-grid-active{background-color:var(--active-background-color)!important;color:var(--active-text-color)!important}.flexi-grid-active>.flexi-grid-page-link{background-color:var(--active-background-color);color:var(--active-text-color)!important}.flexi-grid-active{z-index:3;color:var(--active-text-color)!important;border-color:var(--active-background-color)!important}.flexi-grid-active a{color:var(--active-text-color)}.flexi-grid-page-link{position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#886ab5;background-color:var(--background-color-part);border:1px solid var(--border-color);border-radius:3px}.flexi-grid-page-link:hover{background-color:var(--hover-background-color)!important;color:var(--hover-text-color)!important}.flexi-grid-pagination .flexi-grid-page-item.disabled{cursor:not-allowed;opacity:.5;pointer-events:none}.flexi-grid-pagesize-select{margin-left:5px;padding:5px}.flexi-grid-filter-container{position:relative}.flexi-grid-dropdown-menu{display:none;position:absolute;top:100%;right:0;z-index:1000;float:left;min-width:160px;padding:5px 0;margin:0;font-size:14px;color:var(--text-color);text-align:left;list-style:none;background-color:var(--background-color);background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem;box-shadow:0 .5rem 1rem #0000002d}.flexi-grid-dropdown-menu.show{display:block}.flexi-grid-dropdown-item{display:block;padding:3px 1.5rem;clear:both;font-weight:400;color:var(--text-color);text-align:inherit;background-color:transparent;border:0}.flexi-grid-dropdown-item:hover,.flexi-grid-dropdown-item:focus{color:var(--text-hover-color)!important;text-decoration:none;background-color:var(--hover-background-color)}.flexi-grid-dropdown-checkbox-item{padding:5px;display:flex;align-items:center;gap:3px}.flexi-grid-dropdown-checkbox-item:hover{color:var(--text-hover-color)!important;text-decoration:none;background-color:var(--hover-background-color);color:var(--hover-text-color);border-radius:5px}.flexi-grid-dropdown-title{text-align:center;padding-bottom:10px;border-bottom:1px solid (var(--border-color))}.flexi-grid-btn{box-shadow:0 1px rgba(var(--tblr-body-color-rgb),.04);display:inline-block;padding:.4075rem 1rem;font-family:-apple-system,BlinkMacSystemFont,San Francisco,Segoe UI,Roboto,Helvetica Neue,sans-serif;font-size:.875rem;font-weight:500;line-height:1.5;color:var(--text-color);text-align:center;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid #ccc;border-radius:4px;background-color:var(--background-color);box-shadow:inset 0 1px #ffffff26,0 1px 1px #00000013;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}.flexi-grid-btn:hover{border-color:#000}.overflow-x{overflow-x:auto}.flexi-grid-resize-handle{position:absolute;right:0;top:0;height:100%;width:5px;cursor:col-resize;z-index:1}.text-overflow-hidden{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.flexi-grid-caption-div{position:relative;display:flex;justify-content:space-between;align-items:center;width:100%;box-sizing:border-box;background-color:var(--bg-color-gray);padding:15px;border-bottom:1px solid var(--border-color)}.flexi-grid-mobile-filter-tr{display:none!important}.flexi-grid-mobile-filter-tr th{display:flex!important;width:100%;justify-content:center}.svg-mobile{width:20px}@media (max-width: 1000px){.show-filter{display:none}.flexi-grid-table-container{overflow-x:auto;width:100%;margin:0;padding:0;box-shadow:none;border:none}.flexi-grid-table-container table,.flexi-grid-table-container thead,.flexi-grid-table-container tbody,.flexi-grid-table-container th,.flexi-grid-table-container td,.flexi-grid-table-container tr{display:block}.flexi-grid-table-container thead tr{display:none}.flexi-grid-table-container tbody tr{margin-bottom:15px;border-bottom:2px solid var(--border-color)}.flexi-grid-table-container td,.flexi-grid-filter-tr .flexi-grid-filter-th{text-align:left;padding-left:50%;position:relative}.flexi-grid-filter-tr{background:#00000080!important}.flexi-grid-index-td{width:100%!important}.flexi-grid-table-container td:before,.flexi-grid-filter-tr .flexi-grid-filter-th:before{content:attr(data-label);position:absolute;left:10px;width:45%;padding-right:10px;white-space:nowrap;text-align:left;font-weight:700}.flexi-grid-table-container td{width:100%!important}.flexi-grid-mobile-filter-tr{display:block!important}.flexi-grid-filter-tr{position:absolute;width:100%;height:100%;background-color:#0000001a;z-index:999}.flexi-grid-filter-tr.show{display:block!important}.flexi-grid-table-container td:last-child{border-bottom:0}.flexi-grid-caption-div{flex-direction:column;align-items:center}.flexi-grid-pagination{font-size:10px}}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "pipe", type: i1.CurrencyPipe, name: "currency" }, { kind: "pipe", type: i1.DatePipe, name: "date" }, { kind: "pipe", type: i3.TrCurrencyPipe, name: "trCurrency" }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'flexi-grid', encapsulation: ViewEncapsulation.None, template: "<title>Angular Flexi Grid</title>\r\n<div [attr.data-bs-theme]=\"themeClass\" class=\"flexi-grid-table-container overflow-x\" [ngStyle]=\"{'width': autoWidth ? '100%' : width}\">\r\n  @if(showCaption){\r\n    <div class=\"flexi-grid-caption-div\">\r\n      <h3>{{captionTitle}}</h3>\r\n      <div class=\"d-flex\" style=\"gap: 10px;\">      \r\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\r\n        @if(showExportExcel){\r\n          <button [ngClass]=\"exportExcelBtnClass\" (click)=\"onExportExcelButtonClick()\">\r\n            <svg style=\"width: 13px;\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d=\"M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM155.7 250.2L192 302.1l36.3-51.9c7.6-10.9 22.6-13.5 33.4-5.9s13.5 22.6 5.9 33.4L221.3 344l46.4 66.2c7.6 10.9 5 25.8-5.9 33.4s-25.8 5-33.4-5.9L192 385.8l-36.3 51.9c-7.6 10.9-22.6 13.5-33.4 5.9s-13.5-22.6-5.9-33.4L162.7 344l-46.4-66.2c-7.6-10.9-5-25.8 5.9-33.4s25.8-5 33.4 5.9z\"/></svg>\r\n          </button>\r\n        }\r\n        @if(showColumnVisibility){\r\n          <button [ngClass]=\"columnVisibilityBtnClass\" title=\"Column Visibility\" (click)=\"toggleColumnVisibilityDropdown()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"cursor\" style=\"width: 15px;\" viewBox=\"0 0 512 512\"><path d=\"M40 48C26.7 48 16 58.7 16 72v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V72c0-13.3-10.7-24-24-24H40zM192 64c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zM16 232v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V232c0-13.3-10.7-24-24-24H40c-13.3 0-24 10.7-24 24zM40 368c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V392c0-13.3-10.7-24-24-24H40z\"/></svg>\r\n            <div class=\"flexi-grid-dropdown-menu\" [class.show]=\"columnVisibilityDropdownVisible()\">\r\n              <p class=\"flexi-grid-dropdown-title\">Column Visibility</p>\r\n              @for(column of columns; track $index){\r\n                <label class=\"flexi-grid-dropdown-checkbox-item\" [for]=\"column.field\">\r\n                  <input [(ngModel)]=\"column.visible\" [id]=\"column.field\" type=\"checkbox\">\r\n                  {{ column.title ? column.title : column.field }}\r\n                </label>                    \r\n              }                    \r\n            </div>\r\n          </button>\r\n        }\r\n        @if(showRefreshData && dataBinding){\r\n          <button [ngClass]=\"refreshDataBtnClass\" (click)=\"refreshDataMethod()\">\r\n            <svg style=\"width: 13px;\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d=\"M463.5 224H472c13.3 0 24-10.7 24-24V72c0-9.7-5.8-18.5-14.8-22.2s-19.3-1.7-26.2 5.2L413.4 96.6c-87.6-86.5-228.7-86.2-315.8 1c-87.5 87.5-87.5 229.3 0 316.8s229.3 87.5 316.8 0c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0c-62.5 62.5-163.8 62.5-226.3 0s-62.5-163.8 0-226.3c62.2-62.2 162.7-62.5 225.3-1L327 183c-6.9 6.9-8.9 17.2-5.2 26.2s12.5 14.8 22.2 14.8H463.5z\"/></svg>\r\n          </button>\r\n        }\r\n        <div style=\"margin-right: 10px;\"></div>\r\n      </div>\r\n    </div>\r\n  }\r\n <table [ngStyle]=\"{'min-width': !useMinWidth ? '100%' : minWidth}\">\r\n   <thead>     \r\n     <tr>\r\n       @if(showIndex){\r\n         <th [ngStyle]=\"{'width': indexWidth}\">#</th>\r\n       }\r\n       @for(column of columns; track $index){          \r\n         @if(sortable && column.sortable && column.field && data.length > 0){\r\n           <th [ngStyle]=\"{'width': column.width}\" class=\"cursor flexi-grid-border\" [hidden]=\"!column.visible\"\r\n               [draggable]=\"(draggable && column.draggable)\"\r\n               (dragstart)=\"onDragStart($event, $index)\" \r\n               (dragover)=\"onDragOver($event, $index)\" \r\n               (drop)=\"onDrop($event, $index)\">\r\n             @if(resizable && column.resizable){\r\n               <div class=\"flexi-grid-resize-handle\" (mousedown)=\"onMouseDown($event, column)\"></div>\r\n             }\r\n             <div (click)=\"sort(column.field)\">\r\n               <span>{{ column.title ? column.title : column.field }}</span>\r\n               <span class=\"ms-2\">\r\n                 @if(this.state.sort.field === column.field){\r\n                   <span *ngIf=\"state.sort.field === column.field\">\r\n                     {{ state.sort.dir === 'asc' ? '\u2191' : '\u2193' }}\r\n                   </span>\r\n                 }\r\n               </span>\r\n             </div>              \r\n           </th>\r\n         }@else {\r\n           <th \r\n             [draggable]=\"(draggable && column.draggable)\" \r\n             [ngStyle]=\"{'width': column.width}\" \r\n             class=\"flexi-grid-border\" \r\n             [hidden]=\"!column.visible\"\r\n             (dragstart)=\"onDragStart($event, $index)\" \r\n             (dragover)=\"onDragOver($event, $index)\" \r\n             (drop)=\"onDrop($event, $index)\">\r\n             @if(resizable && column.resizable){\r\n               <div class=\"flexi-grid-resize-handle\" (mousedown)=\"onMouseDown($event, column)\"></div>\r\n             }\r\n             <div>\r\n               <span>{{ column.title ? column.title : column.field }}</span>\r\n             </div>\r\n           </th>\r\n         }\r\n       }\r\n     </tr> \r\n     @if(filterable){\r\n      <tr class=\"flexi-grid-mobile-filter-tr\">\r\n        <th colSpan=\"2\">\r\n          @if(isShowMobileFilter()){\r\n            <button class=\"flexi-grid-btn\" (click)=\"closeMobileFilter()\">              \r\n              <svg class=\"svg-mobile cursor\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M3.9 22.9C10.5 8.9 24.5 0 40 0H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L396.4 195.6C316.2 212.1 256 283 256 368c0 27.4 6.3 53.4 17.5 76.5c-1.6-.8-3.2-1.8-4.7-2.9l-64-48c-8.1-6-12.8-15.5-12.8-25.6V288.9L9 65.3C-.7 53.4-2.8 36.8 3.9 22.9zM432 224a144 144 0 1 1 0 288 144 144 0 1 1 0-288zm59.3 107.3c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L432 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L409.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L432 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L454.6 368l36.7-36.7z\"/></svg>\r\n              Filtreyi Kapat\r\n            </button>\r\n          }@else {\r\n            <button class=\"flexi-grid-btn\" (click)=\"openMobileFilter()\">\r\n              <svg class=\"svg-mobile cursor\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M3.9 54.9C10.5 40.9 24.5 32 40 32H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L320 320.9V448c0 12.1-6.8 23.2-17.7 28.6s-23.8 4.3-33.5-3l-64-48c-8.1-6-12.8-15.5-12.8-25.6V320.9L9 97.3C-.7 85.4-2.8 68.8 3.9 54.9z\"/></svg>\r\n              Filtreyi A\u00E7\r\n            </button>\r\n          }\r\n        </th>\r\n      </tr>\r\n      <tr class=\"flexi-grid-filter-tr\" #flexiGridFilterTr>\r\n        @if(showIndex && !isShowMobileFilter()){\r\n          <th class=\"flexi-grid-filter-th\" [ngStyle]=\"{'width': indexWidth}\"></th>\r\n        }\r\n        @for(column of columns; track $index){          \r\n          @if(column.filterable && column.field){            \r\n            <th class=\"flexi-grid-filter-th\" [hidden]=\"!column.visible\" [attr.data-label]=\"column.title ? column.title : column.field\">\r\n              <div class=\"d-flex flexi-grid-filter-container\">\r\n                @if(column.filterType === \"text\"){\r\n                  <input class=\"flexi-grid-filter-input\" type=\"text\" [(ngModel)]=\"column.value\" (input)=\"filter(column.field, column.filterOperator, column.value, column.filterType)\">\r\n                  @if(!column.value){\r\n                    <svg class=\"svg cursor show-filter\" (click)=\"toggleFilterDropdown(column.field)\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M3.9 54.9C10.5 40.9 24.5 32 40 32H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L320 320.9V448c0 12.1-6.8 23.2-17.7 28.6s-23.8 4.3-33.5-3l-64-48c-8.1-6-12.8-15.5-12.8-25.6V320.9L9 97.3C-.7 85.4-2.8 68.8 3.9 54.9z\"/></svg>\r\n                    <div class=\"flexi-grid-dropdown-menu\" [class.show]=\"filterDropdownVisible()[column.field]\">\r\n                      @for(filterType of textFilterTypes(); track filterType.operator){\r\n                        <a class=\"flexi-grid-dropdown-item\" [ngClass]=\"column.filterOperator === filterType.operator ? 'flexi-grid-active' : ''\" (click)=\"applyFilter(column, filterType.operator)\">\r\n                          {{ filterType.value }}\r\n                        </a>\r\n                      }                    \r\n                    </div>\r\n                  }\r\n                }@else if(column.filterType === \"date\"){\r\n                  <input class=\"flexi-grid-filter-input\" type=\"date\" [(ngModel)]=\"column.value\" (input)=\"filter(column.field, column.filterOperator, column.value, column.filterType)\">\r\n                }@else if(column.filterType === \"date-time\"){\r\n                  <input class=\"flexi-grid-filter-input\" type=\"datetime-local\" [(ngModel)]=\"column.value\" (input)=\"filter(column.field, column.filterOperator, column.value, column.filterType)\">\r\n                }@else if(column.filterType === \"number\"){\r\n                  <input class=\"flexi-grid-filter-input\" type=\"number\" [(ngModel)]=\"column.value\" (input)=\"filter(column.field, column.filterOperator, column.value, column.filterType)\">\r\n                  @if(!column.value){\r\n                    <svg class=\"svg cursor show-filter\" (click)=\"toggleFilterDropdown(column.field)\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M3.9 54.9C10.5 40.9 24.5 32 40 32H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L320 320.9V448c0 12.1-6.8 23.2-17.7 28.6s-23.8 4.3-33.5-3l-64-48c-8.1-6-12.8-15.5-12.8-25.6V320.9L9 97.3C-.7 85.4-2.8 68.8 3.9 54.9z\"/></svg>\r\n                    <div class=\"flexi-grid-dropdown-menu\" [class.show]=\"filterDropdownVisible()[column.field]\">\r\n                      @for(filterType of numberFilterTypes(); track filterType.operator){\r\n                        <a class=\"flexi-grid-dropdown-item\" [ngClass]=\"column.filterOperator === filterType.operator ? 'flexi-grid-active' : ''\" (click)=\"applyFilter(column, filterType.operator)\">\r\n                          {{ filterType.value }}\r\n                        </a>\r\n                      }                    \r\n                    </div>\r\n                  }\r\n                }\r\n                \r\n                @if(showClearFilter(column.value)){\r\n                  <svg (click)=\"clearFilter(column.field)\" class=\"svg cursor\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M3.9 22.9C10.5 8.9 24.5 0 40 0H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L396.4 195.6C316.2 212.1 256 283 256 368c0 27.4 6.3 53.4 17.5 76.5c-1.6-.8-3.2-1.8-4.7-2.9l-64-48c-8.1-6-12.8-15.5-12.8-25.6V288.9L9 65.3C-.7 53.4-2.8 36.8 3.9 22.9zM432 224a144 144 0 1 1 0 288 144 144 0 1 1 0-288zm59.3 107.3c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L432 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L409.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L432 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L454.6 368l36.7-36.7z\"/></svg>\r\n                }\r\n              </div>\r\n            </th>\r\n          }@else {\r\n            @if(!isShowMobileFilter()){\r\n              <th [hidden]=\"!column.visible\"></th>\r\n            }\r\n          }\r\n        }\r\n      </tr>\r\n    }    \r\n   </thead>\r\n   <tbody class=\"relative\" [ngStyle]=\"{'height': autoHeight ? '100%' : height}\" style=\"min-height: 100px;\" [ngStyle]=\"tbodyStyle\">\r\n     @if(loading){        \r\n       <div class=\"flexi-grid-spinner-container\">\r\n         <div class=\"flexi-grid-spinner-1\"></div>\r\n         <div class=\"flexi-grid-spinner-2\"></div>\r\n       </div>\r\n     }\r\n     @if(data.length > 0){      \r\n       @for(item of pagedData(); track $index; let i = $index){\r\n         <tr [ngStyle]=\"{'min-height': trMinHeight}\">\r\n           @if(showIndex){\r\n             @if(!pageable){\r\n               <td class=\"flexi-grid-index-td\" [ngStyle]=\"{'width': indexWidth}\" [attr.data-label]=\"'#'\">{{($index + 1)}}</td>\r\n             }\r\n             @else{\r\n               <td class=\"flexi-grid-index-td\" [ngStyle]=\"{'width': indexWidth}\" [attr.data-label]=\"'#'\">{{($index + ((state.pageNumber -1) * +state.pageSize)) + 1}}</td>\r\n             }\r\n           }\r\n           @for(column of columns; track $index){\r\n             @if(column.columnTemplate && column.visible){\r\n               <td [ngStyle]=\"{'width': column.width, 'text-align': column.textAlign}\" [ngClass]=\"column.className\" [attr.data-label]=\"column.title ? column.title : column.field\">\r\n                 <ng-container *ngTemplateOutlet=\"column.columnTemplate; context: {value: item[column.field], item: item, index: i}\"></ng-container>\r\n               </td>\r\n             }@else {\r\n               <td [ngStyle]=\"{'width': column.width, 'text-align': column.textAlign}\" [hidden]=\"!column.visible\" [ngClass]=\"column.className\" [ngClass]=\"column.hideOverflow ? 'text-overflow-hidden' : ''\" [attr.data-label]=\"column.title ? column.title : column.field\" [title]=\"item ? getFieldValue(item, column.field) : ''\">\r\n                 @if(column.field){\r\n                   @if((column.filterType === \"date\" || column.filterType === \"date-time\") && column.filterType){\r\n                     {{ getFieldValue(item, column.field) | date: column.format! }}\r\n                   }@else if(column.filterType === \"number\" && column.filterType){\r\n                     @if(column.format === \"n\" || column.format === null){\r\n                       {{ (getFieldValue(item, column.field) | trCurrency: \"\": true: column.fraction) }}\r\n                     }@else if(column.format === \"c\"){\r\n                       {{ (getFieldValue(item, column.field) | trCurrency : column.symbol: column.showSymbolInFront: column.fraction) }}\r\n                     }                    \r\n                   }\r\n                   @else {\r\n                     {{ getFieldValue(item, column.field) }}\r\n                   }\r\n                 }\r\n               </td>\r\n             }            \r\n           }\r\n         </tr>\r\n       }\r\n     }@else {\r\n       @if(!loading){\r\n         <tr style=\"height: 100%;\" [ngStyle]=\"{'min-height': trMinHeight}\">\r\n           <td style=\"text-align: center;\" [colSpan]=\"columns?.length\">\r\n             <h4>G\u00F6sterilecek veri bulunamad\u0131!</h4>\r\n           </td>\r\n         </tr>\r\n       }\r\n     }\r\n   </tbody>\r\n   <tfoot>\r\n     <ng-container *ngTemplateOutlet=\"footerTemplate\" class=\"overflow-x\"></ng-container>     \r\n   </tfoot>\r\n </table>\r\n  @if(pageable){\r\n    <div class=\"flexi-grid-pagination-container\">\r\n      @if(!isShowMobileFilter()){\r\n        <div class=\"flexi-grid-pagination-part-one\">\r\n          <select class=\"flexi-grid-pagesize-select\" [ngModel]=\"state.pageSize\" (change)=\"changePageSize($event)\">\r\n            @for(size of pageSizeList; track size){\r\n            <option>{{size}}</option>\r\n            }\r\n          </select>\r\n        </div>\r\n        <div class=\"flexi-grid-pagination-part-two\">\r\n          <ul class=\"flexi-grid-pagination\">\r\n            @if(this.pageNumbers().length > 1){              \r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === 1 ? 'disabled': ''\" (click)=\"changePage(1)\">\r\n                <a class=\"flexi-grid-page-link\" aria-label=\"Previous\">\r\n                  <span aria-hidden=\"true\">&laquo;</span>\r\n                </a>\r\n              </li>\r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === 1 ? 'disabled': ''\"\r\n                (click)=\"changePage(state.pageNumber - 1)\">\r\n                <a class=\"flexi-grid-page-link\" aria-label=\"Previous\">\r\n                  <span aria-hidden=\"true\">&#8249;</span>\r\n                </a>\r\n              </li>\r\n              @if(pageNumbers()[0] !== 1){\r\n              <li class=\"flexi-grid-page-item\" (click)=\"previousPageGroup()\">\r\n                <a class=\"flexi-grid-page-link\">...</a>\r\n              </li>\r\n              }\r\n              @for(pageNumber of pageNumbers(); track pageNumber){\r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === pageNumber ? 'flexi-grid-active': ''\">\r\n                <a (click)=\"changePage(pageNumber)\" class=\"flexi-grid-page-link\">\r\n                  {{pageNumber}}\r\n                </a>\r\n              </li>\r\n              }\r\n              @if(pageNumbers()[pageNumbers().length - 1] !== totalPageCount()){\r\n              <li class=\"flexi-grid-page-item\" (click)=\"nextPageGroup()\">\r\n                <a class=\"flexi-grid-page-link\">...</a>\r\n              </li>\r\n              }\r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === totalPageCount() ? 'disabled': ''\"\r\n                (click)=\"changePage(state.pageNumber + 1)\">\r\n                <a class=\"flexi-grid-page-link\" aria-label=\"Next\">\r\n                  <span aria-hidden=\"true\">&#8250;</span>\r\n                </a>\r\n              </li>\r\n              <li class=\"flexi-grid-page-item\" [ngClass]=\"state.pageNumber === totalPageCount() ? 'disabled': ''\"\r\n                (click)=\"changePage(totalPageCount())\">\r\n                <a class=\"flexi-grid-page-link\" aria-label=\"Next\">\r\n                  <span aria-hidden=\"true\">&raquo;</span>\r\n                </a>\r\n              </li>\r\n            }\r\n          </ul>        \r\n        </div>\r\n      }\r\n      <div class=\"flexi-grid-pagination-part-third\">\r\n        <span> \r\n            {{state.pageNumber}} - {{totalPageCount()}} of {{(total | currency: '': '': '1.0')!.replace(',','.')}} items \r\n        </span>\r\n      </div>\r\n    </div>\r\n  }\r\n</div>", styles: ["@import\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\";[data-bs-theme=light]{--background-color: #f8f9fa;--background-color-part: #fff;--bg-color-gray: #f8f9fa;--text-color: #000;--text-hover-color: #212529;--active-text-color: #212529;--active-background-color: #ebf5ff;--tbody-hover: #f1f1f1;--hover-background-color: #ebf5ff;--hover-text-color: #212529;--border-color: #dee2e6}[data-bs-theme=dark]{--background-color: #212529;--background-color-part: #141414;--bg-color-gray: #000;--text-color: #fff;--text-hover-color: #000;--tbody-hover: #353232;--active-text-color: #141414;--active-background-color: #f8f9fa;--hover-background-color: #f8f9fa;--hover-text-color: #212529;--border-color: #141414}input[type=number]::-webkit-outer-spin-button,input[type=number]::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}svg{fill:var(--text-color)}a{cursor:pointer;-webkit-user-select:none;user-select:none;text-decoration:none!important}.flexi-grid-page-size-select{margin-left:20px}.relative{position:relative}.cursor{cursor:pointer}.flexi-grid-spinner-container{position:absolute;z-index:1;width:100%;background-color:#55536d1a;height:100%;display:flex;justify-content:center;align-items:center}.flexi-grid-spinner-1{position:absolute;height:60px;width:60px;border:3px solid;top:auto;border-radius:50%;border-left-color:transparent;border-right-color:transparent;animation:flexi-grid-spin-1 .8s linear infinite;background-color:transparent}.flexi-grid-spinner-2{position:absolute;height:30px;width:30px;top:auto;border:3px solid;border-radius:50%;border-top-color:transparent;border-bottom-color:transparent;animation:flexi-grid-spin-2 1.3s linear infinite;background-color:transparent}@keyframes flexi-grid-spin-1{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes flexi-grid-spin-2{0%{transform:rotate(0)}to{transform:rotate(-360deg)}}.flexi-grid-pagination-container{background-color:var(--background-color);padding:20px;display:flex;justify-content:space-between;align-items:center;overflow-x:auto}@media screen and (max-width: 1350px){.flexi-grid-pagination-container,.flexi-grid-pagination-td{flex-direction:column;gap:10px}.flexi-grid-pagination-div{flex-direction:column}}.flexi-grid-pagination{display:flex;list-style:none;overflow-x:auto;margin:0;padding:0}.flexi-grid-pagination a{color:var(--text-color)}.svg{width:30px;margin-left:3px;padding:5px;border:1px solid #ccc}.svg:hover{background-color:#0000001a}.d-flex{display:flex;align-items:center}.flexi-grid-table-container{border:1px solid var(--border-color);border-radius:12px;overflow-x:auto;box-shadow:0 0 10px #0000001a;display:flex;flex-direction:column;background-color:var(--background-color-part);color:var(--text-color)}.flexi-grid-table-container table{caption-side:top;background-color:var(--background-color-part)}.flexi-grid-table-container caption{caption-side:top;padding:10px;background-color:var(--bg-color-gray);text-align:left;font-weight:700;border-bottom:1px solid var(--border-color)}.flexi-grid-table-container table{width:99.99%;border-collapse:collapse;overflow:auto;position:relative}.flexi-grid-table-container tbody::-webkit-scrollbar{display:none!important;width:12px}.flexi-grid-table-container tbody::-webkit-scrollbar-track{background:var(--background-color-part)}.flexi-grid-table-container tbody::-webkit-scrollbar-thumb{background-color:var(--text-color);border-radius:20px;border:3px solid var(--background-color-part)}.flexi-grid-table-container th,.flexi-grid-table-container td{padding-left:10px;padding-right:10px;text-align:left;border-bottom:1px solid var(--border-color)}.flexi-grid-border{position:relative;padding-right:10px}.flexi-grid-table-container td,.flexi-grid-filter-th,.flexi-grid-table-container th{border-right:1px solid var(--border-color);overflow-wrap:anywhere}.flexi-grid-border:last-child:after{display:none}.flexi-grid-table-container tfoot td{border-right:0px}.flexi-grid-table-container th{background-color:var(--background-color);padding-top:20px;padding-bottom:15px;position:sticky;top:0;z-index:1}.flexi-grid-table-container th{-webkit-user-select:none;user-select:none}.flexi-grid-table-container tbody tr:nth-child(odd){background-color:var(--background-color)}.flexi-grid-table-container tbody tr:hover{background-color:var(--tbody-hover)}.flexi-grid-table-container tbody{flex:1;overflow:auto;display:block}.flexi-grid-table-container tbody tr{display:table;width:100%;table-layout:fixed}.flexi-grid-table-container thead,.flexi-grid-table-container tfoot{display:table;width:calc(100% - 12px);width:100%;table-layout:fixed;z-index:1}.flexi-grid-filter-input{width:80%;padding:5px;border:1px solid #ced4da;border-radius:3px;background-color:var(--background-color-part);color:var(--text-color)}.flexi-grid-select-container{display:flex;align-items:center;margin-top:10px}.flexi-grid-select-container select{margin-right:10px}div .flexi-grid-active{background-color:var(--active-background-color)!important;color:var(--active-text-color)!important}.flexi-grid-active>.flexi-grid-page-link{background-color:var(--active-background-color);color:var(--active-text-color)!important}.flexi-grid-active{z-index:3;color:var(--active-text-color)!important;border-color:var(--active-background-color)!important}.flexi-grid-active a{color:var(--active-text-color)}.flexi-grid-page-link{position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#886ab5;background-color:var(--background-color-part);border:1px solid var(--border-color);border-radius:3px}.flexi-grid-page-link:hover{background-color:var(--hover-background-color)!important;color:var(--hover-text-color)!important}.flexi-grid-pagination .flexi-grid-page-item.disabled{cursor:not-allowed;opacity:.5;pointer-events:none}.flexi-grid-pagesize-select{margin-left:5px;padding:5px}.flexi-grid-filter-container{position:relative}.flexi-grid-dropdown-menu{display:none;position:absolute;top:100%;right:0;z-index:1000;float:left;min-width:160px;padding:5px 0;margin:0;font-size:14px;color:var(--text-color);text-align:left;list-style:none;background-color:var(--background-color);background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem;box-shadow:0 .5rem 1rem #0000002d}.flexi-grid-dropdown-menu.show{display:block}.flexi-grid-dropdown-item{display:block;padding:3px 1.5rem;clear:both;font-weight:400;color:var(--text-color);text-align:inherit;background-color:transparent;border:0}.flexi-grid-dropdown-item:hover,.flexi-grid-dropdown-item:focus{color:var(--text-hover-color)!important;text-decoration:none;background-color:var(--hover-background-color)}.flexi-grid-dropdown-checkbox-item{padding:5px;display:flex;align-items:center;gap:3px}.flexi-grid-dropdown-checkbox-item:hover{color:var(--text-hover-color)!important;text-decoration:none;background-color:var(--hover-background-color);color:var(--hover-text-color);border-radius:5px}.flexi-grid-dropdown-title{text-align:center;padding-bottom:10px;border-bottom:1px solid (var(--border-color))}.flexi-grid-btn{box-shadow:0 1px rgba(var(--tblr-body-color-rgb),.04);display:inline-block;padding:.4075rem 1rem;font-family:-apple-system,BlinkMacSystemFont,San Francisco,Segoe UI,Roboto,Helvetica Neue,sans-serif;font-size:.875rem;font-weight:500;line-height:1.5;color:var(--text-color);text-align:center;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid #ccc;border-radius:4px;background-color:var(--background-color);box-shadow:inset 0 1px #ffffff26,0 1px 1px #00000013;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}.flexi-grid-btn:hover{border-color:#000}.overflow-x{overflow-x:auto}.flexi-grid-resize-handle{position:absolute;right:0;top:0;height:100%;width:5px;cursor:col-resize;z-index:1}.text-overflow-hidden{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.flexi-grid-caption-div{position:relative;display:flex;justify-content:space-between;align-items:center;width:100%;box-sizing:border-box;background-color:var(--bg-color-gray);padding:15px;border-bottom:1px solid var(--border-color)}.flexi-grid-mobile-filter-tr{display:none!important}.flexi-grid-mobile-filter-tr th{display:flex!important;width:100%;justify-content:center}.svg-mobile{width:20px}@media (max-width: 1000px){.show-filter{display:none}.flexi-grid-table-container{overflow-x:auto;width:100%;margin:0;padding:0;box-shadow:none;border:none}.flexi-grid-table-container table,.flexi-grid-table-container thead,.flexi-grid-table-container tbody,.flexi-grid-table-container th,.flexi-grid-table-container td,.flexi-grid-table-container tr{display:block}.flexi-grid-table-container thead tr{display:none}.flexi-grid-table-container tbody tr{margin-bottom:15px;border-bottom:2px solid var(--border-color)}.flexi-grid-table-container td,.flexi-grid-filter-tr .flexi-grid-filter-th{text-align:left;padding-left:50%;position:relative}.flexi-grid-filter-tr{background:#00000080!important}.flexi-grid-index-td{width:100%!important}.flexi-grid-table-container td:before,.flexi-grid-filter-tr .flexi-grid-filter-th:before{content:attr(data-label);position:absolute;left:10px;width:45%;padding-right:10px;white-space:nowrap;text-align:left;font-weight:700}.flexi-grid-table-container td{width:100%!important}.flexi-grid-mobile-filter-tr{display:block!important}.flexi-grid-filter-tr{position:absolute;width:100%;height:100%;background-color:#0000001a;z-index:999}.flexi-grid-filter-tr.show{display:block!important}.flexi-grid-table-container td:last-child{border-bottom:0}.flexi-grid-caption-div{flex-direction:column;align-items:center}.flexi-grid-pagination{font-size:10px}}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { data: [{
                type: Input
            }], total: [{
                type: Input
            }], pageable: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], showIndex: [{
                type: Input
            }], pageSizeList: [{
                type: Input
            }], loading: [{
                type: Input
            }], sortable: [{
                type: Input
            }], themeClass: [{
                type: Input
            }], height: [{
                type: Input
            }], filterable: [{
                type: Input
            }], captionTitle: [{
                type: Input
            }], captionTemplate: [{
                type: Input
            }], footerTemplate: [{
                type: Input
            }], showColumnVisibility: [{
                type: Input
            }], showRefreshData: [{
                type: Input
            }], dataBinding: [{
                type: Input
            }], showCaption: [{
                type: Input
            }], showExportExcel: [{
                type: Input
            }], autoHeight: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], useMinWidth: [{
                type: Input
            }], autoWidth: [{
                type: Input
            }], width: [{
                type: Input
            }], indexWidth: [{
                type: Input
            }], columnVisibilityBtnClass: [{
                type: Input
            }], refreshDataBtnClass: [{
                type: Input
            }], exportExcelBtnClass: [{
                type: Input
            }], exportExcelFileName: [{
                type: Input
            }], exportExcelButtonClick: [{
                type: Input
            }], footerPerPageText: [{
                type: Input
            }], resizable: [{
                type: Input
            }], draggable: [{
                type: Input
            }], tbodyStyle: [{
                type: Input
            }], trMinHeight: [{
                type: Input
            }], dataStateChange: [{
                type: Output
            }], columns: [{
                type: ContentChildren,
                args: [FlexiGridColumnComponent]
            }], table: [{
                type: ViewChild,
                args: ['table']
            }], flexiGridFilterTr: [{
                type: ViewChild,
                args: ["flexiGridFilterTr"]
            }], handleClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }], onMouseMove: [{
                type: HostListener,
                args: ['document:mousemove', ['$event']]
            }], onMouseUp: [{
                type: HostListener,
                args: ['document:mouseup']
            }] } });

class FlexiGridService {
    getODataEndpoint(state) {
        let endpoint = `$top=${state.pageSize}&$skip=${state.skip}`;
        if (state.sort.field !== '') {
            endpoint += `&$orderby=${this.toTitleCase(state.sort.field)}`;
            if (state.sort.dir === 'desc') {
                endpoint += ` desc`;
            }
        }
        if (state.filter.length > 0) {
            const filters = state.filter.filter(p => p.value);
            if (filters.length > 0) {
                endpoint += `&$filter=`;
                let filterValue = "";
                filters.forEach((val) => {
                    if (filterValue !== "") {
                        filterValue = filterValue + " and ";
                    }
                    if (val.type === "date") {
                        const date = new Date(val.value);
                        const isoDate = date.toISOString().split('T')[0];
                        filterValue += `${this.toTitleCase(val.field)} eq ${isoDate}`;
                    }
                    else if (val.type === "date-time") {
                        const date = new Date(val.value);
                        const isoDate = date.toISOString();
                        filterValue += `${this.toTitleCase(val.field)} eq ${isoDate}`;
                    }
                    else if (val.type === "number") {
                        if (val.operator === "contains")
                            val.operator = "eq";
                        filterValue += `${this.toTitleCase(val.field)} ${val.operator} ${val.value}`;
                    }
                    else if (val.type === "text") {
                        switch (val.operator) {
                            case "contains":
                                filterValue += `contains(${this.toTitleCase(val.field)}, '${val.value}')`;
                                break;
                            case "not contains":
                                filterValue += `not(contains(${this.toTitleCase(val.field)}, '${val.value}'))`;
                                break;
                            case "startswith":
                                filterValue += `startswith(${this.toTitleCase(val.field)}, '${val.value}')`;
                                break;
                            case "endswith":
                                filterValue += `endswith(${this.toTitleCase(val.field)}, '${val.value}')`;
                                break;
                            case "eq":
                            case "ne":
                                filterValue += `${this.toTitleCase(val.field)} ${val.operator} '${val.value}'`;
                                break;
                            default:
                                filterValue += `${this.toTitleCase(val.field)} ${val.operator} '${val.value}'`;
                                break;
                        }
                    }
                });
                endpoint += filterValue;
            }
        }
        return endpoint;
    }
    toTitleCase(str) {
        return str
            .split(' ') // Metni boşluklardan ayırarak kelimelere bölüyoruz.
            .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // Her kelimenin ilk harfini büyük yapıyoruz.
            .join(' '); // Kelimeleri tekrar birleştiriyoruz.
    }
    exportDataToExcel(data, fileName) {
        if (data.length === 0) {
            console.error('No data to export');
            return;
        }
        // Sütun başlıklarını elde et
        const headers = Object.keys(data[0]);
        // CSV string oluşturma
        let csvData = headers.join(',') + '\n';
        data.forEach(row => {
            let rowData = headers.map(header => {
                const cellData = row[header] ? row[header].toString().replace(/"/g, '""') : '';
                return `"${cellData}"`;
            }).join(',');
            csvData += rowData + '\n';
        });
        // CSV dosyasını indirme
        const blob = new Blob([csvData], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.setAttribute('hidden', '');
        a.setAttribute('href', url);
        a.setAttribute('download', fileName + '.csv');
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridService, providedIn: "root" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root"
                }]
        }] });

class FlexiGridModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridModule, declarations: [FlexiGridComponent,
            FlexiGridColumnComponent], imports: [CommonModule,
            FormsModule,
            TrCurrencyPipe], exports: [FlexiGridComponent,
            FlexiGridColumnComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridModule, imports: [CommonModule,
            FormsModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: FlexiGridModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        FlexiGridComponent,
                        FlexiGridColumnComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        TrCurrencyPipe
                    ],
                    exports: [
                        FlexiGridComponent,
                        FlexiGridColumnComponent
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { FlexiGridColumnComponent, FlexiGridComponent, FlexiGridModule, FlexiGridService, StateFilterModel, StateModel, StateOrderModel };
//# sourceMappingURL=flexi-grid.mjs.map
