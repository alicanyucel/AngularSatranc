import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { FilterType, FlexiGridColumnComponent } from './flexi-grid-column.component';
import { StateModel } from './state.model';
import * as i0 from "@angular/core";
export declare class FlexiGridComponent implements OnChanges, AfterViewInit {
    private cdr;
    data: any[];
    total: number | null | undefined;
    pageable: boolean;
    pageSize: number;
    showIndex: boolean;
    pageSizeList: number[];
    loading: boolean;
    sortable: boolean;
    themeClass: string;
    height: string;
    filterable: boolean;
    captionTitle: string;
    captionTemplate: TemplateRef<any> | any;
    footerTemplate: TemplateRef<any> | any;
    showColumnVisibility: boolean;
    showRefreshData: boolean;
    dataBinding: boolean;
    showCaption: boolean;
    showExportExcel: boolean;
    autoHeight: boolean;
    minWidth: string;
    useMinWidth: boolean;
    autoWidth: boolean;
    width: string;
    indexWidth: string;
    columnVisibilityBtnClass: string;
    refreshDataBtnClass: string;
    exportExcelBtnClass: string;
    exportExcelFileName: string;
    exportExcelButtonClick: (() => void) | undefined;
    footerPerPageText: string;
    resizable: boolean;
    draggable: boolean;
    tbodyStyle: any;
    trMinHeight: string;
    pageNumberCount: import("@angular/core").WritableSignal<number>;
    pageNumbers: import("@angular/core").WritableSignal<number[]>;
    totalPageCount: import("@angular/core").WritableSignal<number>;
    state: StateModel;
    pagedData: import("@angular/core").WritableSignal<any[]>;
    timeoutId: any;
    filterDropdownVisible: import("@angular/core").WritableSignal<{
        [key: string]: boolean;
    }>;
    columnVisibilityDropdownVisible: import("@angular/core").WritableSignal<boolean>;
    textFilterTypes: import("@angular/core").WritableSignal<{
        operator: string;
        value: string;
    }[]>;
    numberFilterTypes: import("@angular/core").WritableSignal<{
        operator: string;
        value: string;
    }[]>;
    draggedColumnIndex: number | undefined;
    tempDraggable: boolean;
    dataStateChange: EventEmitter<any>;
    columns: QueryList<FlexiGridColumnComponent> | undefined;
    table: ElementRef | undefined;
    flexiGridFilterTr: ElementRef<HTMLTableRowElement> | undefined;
    resizingColumn: any;
    startX: number | undefined;
    startWidth: number | undefined;
    isShowMobileFilter: import("@angular/core").WritableSignal<boolean>;
    constructor(cdr: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    initializeColumnsFromData(): void;
    capitalizeFirstLetter(string: string): string;
    changePage(pageNumber: number): void;
    setPageNumbers(): void;
    nextPageGroup(): void;
    previousPageGroup(): void;
    changePageSize(event: any): void;
    updatePagedData(): void;
    sortData(): void;
    sort(field: string): void;
    toggleTheme(): void;
    toggleFilterDropdown(field: string): void;
    applyFilter(column: FlexiGridColumnComponent, operator: string): void;
    filter(field: string, operator: string, value: string, type: FilterType): void;
    showClearFilter(value: any): boolean;
    clearFilter(field: string): void;
    toggleColumnVisibilityDropdown(): void;
    refreshDataMethod(): void;
    closeAllDropdowns(): void;
    handleClick(event: MouseEvent): void;
    onExportExcelButtonClick(): void;
    exportExcel(): void;
    onMouseDown(event: MouseEvent | any, column: any): void;
    onMouseMove: (event: MouseEvent) => void;
    onMouseUp: () => void;
    onDragStart(event: DragEvent, index: number): void;
    onDragOver(event: DragEvent, index: number): void;
    onDrop(event: DragEvent, index: number): void;
    getFieldValue(item: any, field: string): any;
    openMobileFilter(): void;
    closeMobileFilter(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FlexiGridComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FlexiGridComponent, "flexi-grid", never, { "data": { "alias": "data"; "required": false; }; "total": { "alias": "total"; "required": false; }; "pageable": { "alias": "pageable"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "showIndex": { "alias": "showIndex"; "required": false; }; "pageSizeList": { "alias": "pageSizeList"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "sortable": { "alias": "sortable"; "required": false; }; "themeClass": { "alias": "themeClass"; "required": false; }; "height": { "alias": "height"; "required": false; }; "filterable": { "alias": "filterable"; "required": false; }; "captionTitle": { "alias": "captionTitle"; "required": false; }; "captionTemplate": { "alias": "captionTemplate"; "required": false; }; "footerTemplate": { "alias": "footerTemplate"; "required": false; }; "showColumnVisibility": { "alias": "showColumnVisibility"; "required": false; }; "showRefreshData": { "alias": "showRefreshData"; "required": false; }; "dataBinding": { "alias": "dataBinding"; "required": false; }; "showCaption": { "alias": "showCaption"; "required": false; }; "showExportExcel": { "alias": "showExportExcel"; "required": false; }; "autoHeight": { "alias": "autoHeight"; "required": false; }; "minWidth": { "alias": "minWidth"; "required": false; }; "useMinWidth": { "alias": "useMinWidth"; "required": false; }; "autoWidth": { "alias": "autoWidth"; "required": false; }; "width": { "alias": "width"; "required": false; }; "indexWidth": { "alias": "indexWidth"; "required": false; }; "columnVisibilityBtnClass": { "alias": "columnVisibilityBtnClass"; "required": false; }; "refreshDataBtnClass": { "alias": "refreshDataBtnClass"; "required": false; }; "exportExcelBtnClass": { "alias": "exportExcelBtnClass"; "required": false; }; "exportExcelFileName": { "alias": "exportExcelFileName"; "required": false; }; "exportExcelButtonClick": { "alias": "exportExcelButtonClick"; "required": false; }; "footerPerPageText": { "alias": "footerPerPageText"; "required": false; }; "resizable": { "alias": "resizable"; "required": false; }; "draggable": { "alias": "draggable"; "required": false; }; "tbodyStyle": { "alias": "tbodyStyle"; "required": false; }; "trMinHeight": { "alias": "trMinHeight"; "required": false; }; }, { "dataStateChange": "dataStateChange"; }, ["columns"], never, false, never>;
}
